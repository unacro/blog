[{"content":" 九九归真道行难，坚持笃志立玄关。 等了五百年，终于等到今日。\n可能有用的相关链接 # 黑神话（悟空）百科 忘了在哪个 UP 那里刷到过他们拿西游记等资料炼了一个背景知识 AI，你可以通过模糊的描述去问妖怪、地点等出处。有记得的朋友烦请 联系我 告知链接，多谢。 性能优化（画质设置） # 首先提前声明，或者说科普一下：\n当下（次世代）的游戏行业最前沿的发展情况，硬件设施 就是跟不上 软件技术 的。\n因此 超采样 和 帧生成 两种伴生技术才会应运而生，就是为了尽量弥补这种技术代差。\n想要 4K、原生分辨率，还要开 光线追踪，你 4090 就是 不配。这是时代的局限性。\n现在显卡没有交火了，如果还有的话，哪怕交火（几张显卡联动一起跑）都未必能行。\n不要抱有「啊我花了那么多钱，买了市面上能买到的最顶级的配置，我就应该无视物理法则现实规律秒天秒地秒空气，我（的机子）怎么可能不行呢？妥协？绝不妥协！任何妥协都是对我（的钱）的侮辱！我不接受！不然我还怎么装逼？怎么秀优越？」的傲慢心态。\n这有什么不能接受的？\n有钱你当然可以买到全世界最好的医疗条件，但你能买到长生不老乃至返老还童吗？\n具体设置 # 当前版本的 性能测试工具，部分设置只有在 重新启动游戏后 才会生效。\n如果发现改完设置并没有得到任何改善，不要怀疑人生，有可能不是你的问题。 超分辨率采样 # 超采样的原理：\n先（实际）渲染指定的（原始）分辨率；（这一步是显卡的本职工作） 再根据渲染结果，用提前训练好的 AI 模型重建图像（帧），将画面补齐（超分）到当前显示的（输出）分辨率； 最后将补完后的画面传输到你的显示器屏幕。 超采样清晰度 25 - 39 40 - 55 56 - 65 66 - 89 90 - 100 DLSS 质量模式\n（挡位） DLSS 极致性能 DLSS 性能 DLSS 均衡 DLSS 质量 DLAA1\n无 Scaling，AI 抗锯齿 实际渲染的\n原始分辨率 33% 50% 58% 67% 100% 超采样清晰度：见上表。注意这里的设置滑块其实并不是设置要渲染的原始分辨率的具体百分比，而是根据设置的值所在区间选择不同的 DLSS 挡位2。比如你调 56 或者 65，最终都会落到 均衡 这一挡（反正都是 58%），其画质没有任何区别。 超分辨率采样（算法，或者说技术方案）3： A 卡 FSR \u0026gt;\u0026gt; TSR N 卡 DLSS \u0026gt;\u0026gt;\u0026gt; TSR Intel 显卡 XeSS（可能很多人都不知道现在英特尔也在做独显(Arc)了） 帧生成（补帧）：牺牲画质换帧数（当你稳不了 60 帧的时候，开启以保证帧数） N 卡开启后（画质）损失不大 A 卡酌情考虑（除非性能极差，否则都不建议开） 这玩意其实是锦上添花而不是雪中送炭（很简单的道理，原本的帧数越低，新生成时可以依赖的基础就越薄弱），最好还是能保证 50 帧以上再开吧 插帧本质上是伪造的幻觉，并没有对应到真实情况，故而容易和实际场景脱节，导致画面和操作的对应反直觉，所谓的影响手感；另外，建模有可能会出现拖影 开启 帧生成 之后，垂直同步（强制同步显示器刷新率以防画面撕裂）就不会生效了。\n类似的还有：开启 超采样 后，理论上 抗锯齿 是不会生效的（原理互相冲突）。\n工具中并没有在交互效果上表现出这些矛盾之处，设置项的说明文本里也没有提到。\nNVIDIA 全景光线追踪 # 黑神话的光追都是 路径追踪（最新的光追技术，哪怕开低挡也只是分辨率比较低而已，不存在「普通光追」），带来的性能压力极大。\n如果拉到 超高（光追最高三挡），不开 DLSS 的话 4090 都顶不住（平均 20 帧）。\n全景光线追踪：光追开关 全景光线追踪等级：光追挡位（至于哪一挡好，你都上光追了还用我来 bb 吗） 只要不是纯风景党，初见流程都不建议开高等级的光追。\n因为过于真实的光影反而会让人眼看到的画面损失很多暗部细节，影响游戏体验。\n二周目以上（如果有能力开光追的话）可以开中挡（或更高）尽情享受美妙的景色。\n另外，黑神话用到的虚幻 5 相关技术栈，基本上完美契合 40 系显卡的调教。\n4070 跑 2K 分辨率哪怕开到中挡光追，都几乎没什么性能损耗。\n（什么叫 与老黄的深度合作 啊？战术后仰.jpg）\n但如果你是 3080，仅仅只是开低挡光追，帧率都会大幅下跌。\n画质细节 # 性能损耗表（该表据传来自不知名吧友(欢迎原作者认领)，此处列出仅供参考）：\n中 高 超高 影视级 全景光线追踪等级 -50.0% -51.7% -62.7% 无 视野距离 -1.7% -1.7% -3.4% -3.4% 抗锯齿 0.0% 0.0% 0.0% -0.8% 后期处理 0.0% -1.7% -2.5% -2.5% 阴影质量 -6.8% -10.2% -37.3% -39.8% 贴图质量 -1.7% -1.7% -3.4% -3.4% 特效质量 -0.8% -8.5% -10.2% -10.2% 毛发质量 -1.7% -2.5% -6.8% -6.8% 植被质量 -0.8% -3.4% -5.9% -8.5% 全局光照 -17.8% -25.4% -37.3% -44.1% 反射质量 -0.8% -0.8% -1.7% -1.7% 「不对劲！这表格里为什么没有『低』？」\n——那你觉得这么详细的百分比是以什么为基准算出来的？\n个人偏好：\n视野距离：影视级（最高）\n应该就是其他有些游戏里叫的细节层次（LOD）？ 抗锯齿：影视级（最高） 后期处理：影视级（最高） 阴影质量：高\n有就行（有没有的区别很大），高了肉眼很难看出区别，适可而止，没必要拉满 贴图质量：影视级（最高）\n对 物体细节 影响最直接的画面设置（量力而行，虽然高精度贴图不怎么影响帧率，但很吃显存，小心爆显存 闪退） 特效质量：中 毛发质量：中\n类似阴影，门槛达标后，再往上不仔细观察肉眼就很难看出区别了 植被质量：高\n对 整体景观 影响最直接的画面设置 全局光照：低\n人称小光追，越高画面越真实（但中挡水会泛白，既不如低挡水通透、又不如高挡水逼真，上不去下不来的这个段位，没办法，卡在这里了） 反射质量：影视级（最高） 哦对了，还有悄咪咪藏在「显示 - 显示效果」里的 动态模糊，我是直接关掉。\n调低或者关掉能够提升一些帧数。不过我是本来就极度讨厌这个东西（跟奎恩哥一样）。\n你是有多看得起我，老子动态视力本来就弱（什么反向青蛙），还用得着你来画蛇添足？\n总体思路 # 纯属一己之见，仅供参考。 这毕竟是个动作游戏（咋了？ARPG 就不是 Act 了？别拿豆包不当干粮）。\n高帧数带来的感官加成（动画更流畅、操作更跟手、反馈更及时），对游戏体验的影响更为直接，是比些许画质更重要的，我觉得。\n而且黑神话哪怕在低画质（最低挡位）下，这个画面也没有太恶心，也算是能看的。\n如果确实希望追求更好画质的话：\n低画质 到 中画质：性能损失较多（第二多） 中画质 到 高画质：性能损失较少（第三多） 高画质 到 超高画质：性能损失最多（第一多），超过 50% 超高画质 到 影视级画质：性能损失最少 总结一下：\n如果连中画质都带不动（3、40 帧都稳不住），低画质真的也能玩。 如果跑中画质比较从容，且希望画面能更进一步，可以考虑冲一冲高画质。 不是顶配的大多数人，最多留在高画质就行了。超高画质确实有明显提升，但性能损耗实在是太大了，也不说得不偿失，只能说性价比极低。 如果跑超高画质都还有余裕，那干脆一步到位直接上到影视级反而不会有太大问题。 参考文献 # 极客湾Geekerwan《黑神话悟空性能测试！需要什么显卡才能玩？》 好物清单《提前收藏，黑神话悟空画质优化指南》 好物清单《游戏画质设置教程》 Fallere013《偷帧的贼-黑神话画面设置》 贴吧吧友们汇总的 黑神话悟空性能测试统计表 媒体评分风波 # 今日欢呼孙大圣，只缘妖雾又重来。 目前最新的这个时机，国内媒体还没见到哪家敢冒天下之大不韪公开唱反调的。\n上了高速竟然发现所有人都在逆行，那肯定不是你的的问题，当然是全世界的错。\n毕竟你是不可能有错的，众人皆醉你独醒，你就是别具一格、遗世独立的那朵奇葩。\n因此说是媒体，其实主要指的是政治正确肆意横行的外媒。\n说起来，国内的相关苗头在扒掉几个 NGO 的画皮之后，好像被按下去了。\n信源来自外媒里比较权威的两个游戏评测网站：\nMetacritic OpenCritic 捡两个反面典型讲讲。\nIGN 总部 # Despite some frustrating technical issues, Black Myth: Wukong is a great action game with fantastic combat, exciting bosses, tantalizing secrets, and a beautiful world. IGN - Black Myth: Wukong Review, by Mitchell Saltzman IGN 总部：8 / 10.0 分。\n翻译：\n尽管存在一些令人沮丧的技术问题，但《黑神话：悟空》是一款出色的动作游戏，有着精彩的战斗、令人振奋的 Boss，暗藏诱人的秘密，展现出一个美丽的世界。\n关于 技术问题：他视频里的原话是第二章的 bug 很多。但因为保密协议，他不能透露第一章以后的内容，因此无法给大家具体举例说明，非常遗憾。你最好是说的是真的。\n我再翻译一下：\n虽然我说的比唱的好听，但我就是只给 8 分。（8 分其实没啥问题，问题在双标）\n而 2077 那个质量（首发时）我给 9 分，TLOU 2 那个剧情我能给到 10 分。\n咋说呢，你 IGN 游戏打多了可能忘了一点——现实和游戏可不一样。\n现实里的权威（意见领袖）并不 永远都是权威（王权没有永恒，我的孩子），当你做出错误、乃至于大错特错的决断时，你的公信力是必定会下降的，声誉是当然会败坏的。\nScreen Rant # While it has some exceptional features, including its visuals, combat design, and many extraordinarily exhilarating boss fights, as well as a compelling plot line, it is not enough to warrant a better score. Given that most of its shortcomings lie in performance, diversity, and wasted environmental factors that would have transformed it into something great, these are integral features that, at a fundamental level, all RPGs, especially soulslike ones, should encompass in their content. Black Myth: Wukong Review: The Soulslike Action Hype Train Is A Little Off-Rails, by ScreenRant Team Screen Rant：6 / 10.0 分。\n话说他们在推特简介里趾高气昂地自称 largest（最大的）真的没违反广告法吗？\n翻译：\n虽然它具有一些出色的特点，包括其视觉效果、战斗设计和许多惊心动魄的 Boss 战，以及引人入胜的故事线，但这些还 不足以 让它获得更高的评分。鉴于它的大部分缺点在性能、多样性和未能充分利用的环境因素上（这本应将其变成一款佳作），从根本上讲，这些是所有 RPG、尤其是 魂类 游戏（？？？）都应该包含在其游戏内容中不可或缺的特征。\n这位更是重量级。\n光是标题里堂而皇之写上 soulslike 我就很难绷得住了。\n本人老魂玩家了，看我 Steam 主页：魂一（受死版 + 重置版肝了两遍）、魂二原罪学者、魂三全 DLC、只狼——全成就。\n不止是全成就，戒指、服装、武器各种能收集的要素接近 全收集；至今仍记得魂一重置版我还有把锯齿短匕没刷出来（貌似是小隆德的幽魂掉落），当时刷的时候还在读大学。\n至于恶魂和血源没上 PC、装甲核心 6 和老头环（本体 / DLC）太忙还没抽出时间品鉴。\n可以说我对宫崎老贼（勉强捎上谷村吧）爱得深沉，真的心水魂游那个深邃、幽暗、奇幻(deep♂dark♂fantasy)的末世氛围和独树一帜的孤高气质。\n但我也是真的受不了魂小将（哦现在一般喊「魂批」了），跟他妈的一辈子除了他妈的魂游再没他妈的玩过其他好游戏似的，玩了个魂给你牛到天上去了。\n魂是万物起源。只要是即时战斗、剧情稍微带点黑深残，类魂！纯纯的 soulslike！\n巫师是类魂、战神是类魂、刺客信条是类魂、对马岛也是类魂，所有 ARPG 都是类魂。\n也别 ARPG（重叙事轻动作）了，你 ACT（重动作轻叙事）也别想跑，鬼泣也是类魂。\n来都来了，干脆把 RPG 也一锅烩了，地铁是类魂、辐射还是类魂、上古卷轴更是类魂。\n恐怖游戏这个独立门类也别搁那幸灾乐祸了，你生化危机仍然是类魂。哼，想逃？\n敢情只要是 能控制一个单独的游戏角色进行自由探索，就是类魂呗？\n打住打住扯远了，回到正题。捏着鼻子去读评测正文：\nPros（优点）：\nCombat is fluid and fun\n（战斗流畅而有趣） Cinematography can be breathtaking at times\n（电影化运镜有时令人叹为观止） Great diversity in items and mechanics\n（物品和机制的多样性很丰富） Cons（缺点）：\nGame performance is unpolished\n（游戏性能仍需打磨） Lacking in inclusivity and diversity\n（缺乏包容性和多样性） Gameplay becomes repetitive over time\n（时间一长，游戏玩法会变得重复） 才刚刚勉为其难地夸完 道具 和 游戏机制 的多样性，转头就喷缺乏「多样性」。\n这个「多样性」到底是什么鬼东西的多样性，不用我多说了吧？\n（可能是指人类的多样性：类人 群星闪耀时。）\n不懂的话可以看看今年巴黎奥运会开幕式上那群牛鬼蛇神。\n「包容性」、「多元化」，本来就是臭名昭著的 DEI（Diversity, Equity and Inclusion）的三中其二（硬生生把这三个本意是好的积极词汇给玩烂了）。\n我只能说欧美的 政治正确 问题早已病入膏肓无药可治。没救了，等死吧。\n总结 # 不（？）过多展开了，我只能说：互联网是有记忆的。\n等游戏出来，咱们走着瞧。\n到时候再好好看看，这些白纸黑字、言之凿凿的一面之辞到底会成为丰碑还是耻辱柱。\n放出原文链接和作者推特不是我要搞赛博猎巫啊，我对网络暴力深恶痛绝。\n异见归异见，君子和而不同，我的本意上帮你认清这个人，足矣；不是诱导你去骚扰人家，别当网络蝗虫。\n主要还是为了证明信源的可靠性，我最讨厌傻逼媒体（包括很多自媒体、甚至某些官媒）的一点就是张口就来：未经考证、也不带上引用来源、听风就是雨、断章取义、春秋笔法；轮到我自己，当然会引以为戒、下意识地去避免。\nDLAA 没有用到分辨率缩放技术，只有 AI 抗锯齿技术。用人话说：将分配给这部分的所有算力（性能）都拿去抗锯齿了。提升的只有画面精度（画质），而流畅度（帧数）并没有任何改善。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n其实超采样是可以支持 0% - 100% 之间的任意缩放倍率的，但此处并没有实现无极调节，而是常规的 5 个 DLSS 挡位（严格来说 DLAA 都应该算到 抗锯齿 设置里，但最新标准已经将 DLAA 加入 DLSS 了，姑且按下不表），这个滑块的 UX 设计真的超级蠢，误导了无数小白。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nNVIDIA 的 DLSS：Deep Learning Super Sampling，深度学习超采样 技术。\nNVIDIA 的 DLAA：Deep Learning Anti-Aliasing，深度学习抗锯齿 技术。\nAMD 的 FSR：FidelityFX Super Resolution，超级分辨率锐画 技术。\n虚幻引擎的 TSR：Temporal Super Resolution，时间超级分辨率 技术。\nIntel 的 XeSS：Xe Super Sampling，Xe 超级采样 技术（我也不知道 Xe 具体到底代表什么，牙膏厂起名老是莫名其妙不知所谓也不是这几年才开始的事了）。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/posts/game/2024/black-myth-wukong-before-launch/","section":"所有文章","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  九九归真道行难，坚持笃志立玄关。\n\u003c/div\u003e","title":"「黑神话：悟空」上线前夕的碎碎念","type":"posts"},{"content":"\n","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/","section":"Blog Homepage","summary":"","title":"Blog Homepage","type":"page"},{"content":"","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/categories/arpg/","section":"所有分类","summary":"","title":"动作类角色扮演游戏","type":"categories"},{"content":"","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/series/black-myth-wukong/","section":"所有系列","summary":"","title":"黑神话：悟空","type":"series"},{"content":"","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/categories/","section":"所有分类","summary":"","title":"所有分类","type":"categories"},{"content":" 列表页 Todo：\n默认隐藏创建时间 / 修改时间 / 字数统计 / 阅读时间\n默认显示摘要 最近的文章 「黑神话：悟空」上线前夕的碎碎念 2024-08-13 Tue\u0026middot;更新于: 2024-08-18 Sun\u0026middot;5232 字\u0026middot;11 分钟 动作类角色扮演游戏 九九归真道行难，坚持笃志立玄关。 第一千零一次重置博客 2024-08-08 Thu\u0026middot;更新于: 2024-08-11 Sun\u0026middot;2316 字\u0026middot;5 分钟 博客运营 博客 Hugo 大概、也许、应该仍然不是「最后一次」。 浅谈随机性——从模数转换聊到抽卡手游 2024-07-20 Sat\u0026middot;3600 字\u0026middot;8 分钟 杂谈 处世哲学 为什么中奖的永远是别人，而你只有在旁边「吸欧气」的份？ 浅谈对各种游戏中「攻速」的朴素认知 2024-04-22 Mon\u0026middot;4793 字\u0026middot;10 分钟 游戏开发 游戏里的「攻击速度」到底是个什么概念？ Machinations 超简略测评 2024-04-22 Mon\u0026middot;848 字\u0026middot;2 分钟 开发工具 游戏开发 乘兴而来，败兴而归。 ","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/posts/","section":"所有文章","summary":"","title":"所有文章","type":"posts"},{"content":"","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/series/","section":"所有系列","summary":"","title":"所有系列","type":"series"},{"content":"","date":"2024-08-13 Tue","externalUrl":null,"permalink":"/posts/game/","section":"所有文章","summary":"No Game No Life","title":"游戏","type":"posts"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/tags/hugo/","section":"所有标签","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/tags/blog/","section":"所有标签","summary":"","title":"博客","type":"tags"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/categories/blogging/","section":"所有分类","summary":"","title":"博客运营","type":"categories"},{"content":" Why # 我这人有个毛病，很难与 必定混沌的现实 和谐相处；\n过于习惯 滥用……所谓的「断舍离」。\n简单点说，精神洁癖。\n只要我关注某个话题，我必然会产生各种各样的想法。\n如果我无动于衷、转头就忘掉，那还好；一旦我试图 于某处 记录下这些想法—— 持续的更新 意味着 规模的扩大，意味着 不断的熵增，意味着 混乱与无序。 这是不以人的意志为转移的宇宙规律、自然法则；无论你用何种、多高级、再优秀的 知识归纳 方法论，都无法解决这个问题。\n这是 热力学第二定律 确定的：熵增（信息熵也是熵）过程每时每刻都成立，永不停止，无法逆转。\n万一你 觉得 你可以做到——恭喜你，你发明了 第二类永动机。\n拓展到编程方面，这就是目前被越来越多人所认同的一条行业规律：\n功能是 100% 的资产，但源码是 100% 的债务。\n你写的每一行代码都是屎山，每一行。当然，我也是；这世上的任何一个人都是。 软件开发的过程是一个博弈，或者通俗点说，赛跑 过程。\n你要做的就是在 项目必然变成屎山的过程 中 尽可能快 地实现你需要的功能（需求）。\n如果你跑赢了，它（最终成果）就是你的产品；\n如果你跑输了——很正常，想必大家手里都攒了不少这种东西。\n当然，合理的代码规范和 Code Review 仍然是相当有意义的。\n它们至少减缓了项目变成屎山的速度，给出更多操作空间，让你在赛跑过程中更有余裕。\n回到写作方面，前面说到，信息的堆积必定导致混乱与无序。\n而我由于个人原因很难容忍这种混乱与无序，我往往会选择一种简单粗暴的解决方法。\n用高级点的说法叫「归档」（以备日后查阅）；其实就是封存起来，丢到一边吃灰。\n很简单的道理：眼不见心不烦。\n说出来你可能不信，我写博客差不多有十年了。\n但现在（本站）什么样子，大家有目共睹。\n对于（博客）网站本身也是，不说每年，基本隔个两年就要重建一次：\n换风格、换主题、换框架、换技术栈。\n而且基本上每次重新建立后，我回过头读自己以前的文章都觉得不忍卒睹，至少也是「有很大的提升空间」。\n因此我会把以前已经发布的文章和未发布的存稿全都一股脑丢进 inbox，伺机再议(有缘再见)。\n与其说是「重建」，不如说是「重置」。\nWhich # 动态还是静态 # 当然是静态。\n只说个人博客，在线编辑 / 即时更新 绝对是伪需求。\n如果你真的那么在乎文章发布的实时性，那就更应该 提前 做好编辑 \u0026amp; 发布的准备工作，而不是到点了才上赶着临时抱佛脚。\n动态博客的复杂度是降不下去的。环节越多，破绽必然越多，安全性和稳定性一定越低。\n2023 年初 阮一峰的博客被黑 沦为笑柄很多人都知道吧。引以为戒干嘛，接着笑啊。\n而静态博客就可以把整站内容方便快捷、干净利落地托管给 CDN 服务商等 PaaS 平台，放心坐享成熟的配套服务。\n用什么框架 # 我反正选择 Hugo，理由：开源免费、性能优秀、功能强大、生态丰富、更新活跃。\n我确定这不是路径依赖。众所周知，我是一个将「生命在于运动(折腾) 」奉为圭臬的人。\n一线有什么最新技术涌现，我是非常乐意尝鲜的。\n相当炫酷的 Astro 确实很有意思，但那些花里胡哨的功能我的 博客 真的用不到，就用奥卡姆剃刀（如非必要，勿增实体）剃掉了。\n基于个人美学，我还是比较希望自己的博客有更纯粹的写作和阅读体验。\nHugo extended or not # 可能很多刚开始上手 Hugo 的人都会对迷惑于：普通的 hugo 和 hugo-extended 之间有什么区别？我应该选用哪一个？\n一个简单粗暴的解决方案是 无脑选择功能（兼容性）更强的 extended 版，只要你用来运行 Hugo 的设备没有性能瓶颈问题*。\n* 存在性能问题：没开玩笑，这种情况是有可能发生的。\n比如我的 Raspberry Pi 3B+，我明确记得数年前 Hugo 官方的构建链是不含 arm 架构在内的，我想在树莓派上跑最新版的 Hugo 必须自行编译。\n然后我惊讶地发现 3B+ 跑 Hugo 的 extended 版居然蛮吃力的。当然我机子的散热不太行，可能也占了很大因素。\n如果你和我一样是喜欢追根究底的好奇宝宝，以下是结论。\n根据 bep 在 文档仓库 #1152 里的说法：\n「唯一」的 主要 功能区别是——是否支持 SASS/SCSS（显然仅 extended 支持）。 其实还有 图像处理——主要是编码 webp；解码（读取）webp 所有版本都支持。 而其他的，包括 PostCSS 在内的一堆功能，常规版都支持（AI 可能会有不同看法）。 即：extended 版是常规版的超集。\n应该没多少人是不用主题或者自己写主题的吧？\n那么，是否需要 extended 版 其实取决于 你选用的主题 的依赖。\n甚至哪怕你选择的主题用了 SASS/SCSS，但如果该主题提前把编译好的样式加进了 /resources 目录，你仍然可以运行常规版来使用这个主题。\n我个人还是建议：只要你用的机器没拉到带 Hugo 都费劲，无脑上 extended 总归没错。\n用什么主题 # 曾经一度被 Dejavu Moe 种草过 Congo，属实优雅。\n当时没有立刻换是因为实在是太素了，在功能性上并不是很吸引我。\n后来 Blowfish 出现，一直有在关注。\n但那时候我特别反感的一点是：Blowfish 明明是 Congo 的 fork，但在 README 和文档中只字不提，然后还开了捐助通道，真的挺那啥的。\n在这个阶段我还是倾向于 Congo 的。\n直到现在，Blowfish 在 文档 中声明了：\n该主题是 Congo 的一个分支，并进行了 大量 扩展。\n算是勉强洗白。\n并且 Congo 的更新频率（2024.4.17 v2.8.2）确实不如 Blowfish（2024 8.10 v2.75.0）。\n本次重置博客最终决定选用 Blowfish。\nHow # 安装 Hugo # 人生苦短，我用 Scoop：\nscoop install hugo-extended 新建项目 # 基本操作，没啥好说的：\nhugo new site new-blog cd new-blog git init 安装 Blowfish 主题 # 具体细节可以参考《Blowfish 文档 - 安装和配置》。\n我电脑上有 Go，所以我选择依托于 Go 的包管理器实现的 Hugo Modules 来安装主题。\n如果你更喜欢通过 Git 子模块安装主题，也没什么问题。\n唯一需要注意的一点区别：\nHugo Modules 方式：通过读取配置文件里 module 表中的信息 依次加载 声明的依赖模块，无需其他额外配置。 Git Submodule 方式：先用 Git 将主题仓库 clone 到本地的 /themes 目录下，再通过配置文件里的 theme 字段 明确指定 使用某个主题。 配置 Blowfish 主题 # 详见《Blowfish 文档 - 入门指南》。\n至于我的私心偏好会另开一篇文章。\n","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/posts/tech/2024/hugo-blog-remastered/","section":"所有文章","summary":"大概、也许、应该仍然不是「最后一次」。","title":"第一千零一次重置博客","type":"posts"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/posts/tech/","section":"所有文章","summary":"Talk is cheap, show me your code.","title":"科技","type":"posts"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/tags/","section":"所有标签","summary":"","title":"所有标签","type":"tags"},{"content":" 为什么中奖的永远是别人，而你只有在旁边「吸欧气」的份？ 模拟信号与数字信号 # A/D（模数）转换 # 众所周知，ADC 不仅可以是《英雄联盟》中通常走下路、靠普通攻击（平 A）进行伤害输出的「C 位射手」（Attack Damage Carry）。\n还可以是 Analog-to-Digital Converter，A/D（模数）转换器。\n当我们用某种手段，将现实里处于无休止、不规则的变化过程（布朗运动）中的「变量」的变化过程记录下来时，其本质是通过某类（物理存在的）人造机构的「参数」去 模拟 对应现实中的「现象」，比如温度、压力、电压……等。\n得到的「参数集合」就是模拟量，作为现实的一种量化对应的模拟信号显然是连续的。\n那么如何利用这种模拟信号呢？\n我们可以凭空开口讨论 1 + 1 = 2，但你能不借助任何其他工具，直接用语言（抽象）来描述一个波叠加另一个波的结果（具体）是什么吗？\n你看，不用波长、振幅、频率（周期）这些数字量，我们甚至都难以表达出一个波到底长什么样子。\n计算机（冯·诺依曼架构）的 CPU（中央处理器）是基于数字量的（所谓的 1 / 0 二进制机器），想用计算机（以及单片机等一切计算型机器）来处理模拟信号，就必须将其转化为计算机能够读取和处理的数字信号。\n这个过程就是 数字化，即 模数转换。\n数字化也可以称为离散化：把连续分布的模拟量根据 一定精度 进行取点（即 采样）变成有限多个 不连续分布（离散）的数字值，即数字量。\n这种离散处理实际上是从数学上对现实中的模拟量的一种精度有限的概括（简要描述）。\n数字化意味着计算机能够借助（离散）数学来描述简化后的模拟量，这就是计算机技术的基石。\nD/A（数模）转换 # 当然这个转换过程是可逆的，有 A/D 自然就有 D/A。\n不过纯粹地、仅用计算机本身（主要指 CPU），是 不可能 实现数字转模拟的（因为 CPU 本身就是数字的）。\n想实现数模转换可以利用（具有积分或微分性质）的物理器件（比如波形发生器）。\n总结一下，现实中的绝大多数系统都是混沌的、不可预测的。\n使用概率论、微积分等数学方法来进行描述（建模）本质上只是一种 求近似值。\n求近似值，就必然有取舍，或者说：与真实之间的偏差。\n当然了，通过小到微积分、大到大数据等工具，有时我们能够将误差减小到可以忽略不计——但误差再小，也不等于「没有误差」。无穷小量 和 零 是两个概念1。\n当 模数转换（采样）完成时，过于微小的细节部分就已经被舍弃了。\n即便再进行 数模转换 逆变回来，已然消失的信息量也无法凭空重现。\n模数转换导致的信息损失是不可逆的。\n音乐发烧友 # 这就是 音乐发烧友 追求 Hi-Fi（全称 High-Fidelity，高保真）的极致听感的核心原理——数字信号（在转换过程中）会失真。\n本来模拟信号转换为数字信号这个过程就已经失真了（发布方录制的问题，这是作为一般听众鞭长莫及的部分），在（数字信号）传输的时候可千万不能再拉胯了，于是开始疯狂卷包括但不限于线材、功放等硬件设备。\n这也是为什么音质越高（「（自称接近）无损」、母带……）、文件越大的原因。\n采样频率一高，保存下来的细节数也在飙升，信息量就上来了，文件尺寸当然也小不了。\n至于压缩……什么，你敢压缩？How dare you？！（我操，太 HiFi 了.jpg）\n信息是无法 无损 压缩的2，详见 IT 行业祖师爷香农的信息论著作《The mathematical theory of communication（通信的数学理论）》。\n而且话说压完之后不就是普通的 mp3 格式了吗www。\n这同样也是一些古典派（指品味，不是古典乐）音乐爱好者返璞归真到 黑胶唱片 的动机——既然数字信号会失真，咱干脆点回归模拟信号。\n随便升华一下 # 这也是人类文明的核心理念和伟大之处：人类明知不可能臻至完美，但仍然对完美孜孜以求，一代又一代的人们愿意为之付出任何努力。比如：\n法律人明知「绝对公平」不可能存在，但仍然终其一生为实现相对公平前赴后继； 科研人明知现实是荒谬而毫无逻辑的，但仍然穷尽一切可能试图从中总结些许规律； …… 只为逼近那个只存在于理想中的「真理」。\n抽卡手游中的随机 # 真随机与伪随机 # 一般人理解的真随机和伪随机：\n计算机的随机就是 真随机，因为随机结果符合预期的概率分布（此时适用 奥卡姆剃刀：我完全感知不到，也没有其他明显影响，相当于对我来说不存在）； 人为对随机过程进行了干预，导致实际得到的随机结果与标准概率分布之间有偏差，这是 伪随机。 现实中、实际上的真随机和伪随机：\n计算机 没有（也不可能做到）真随机；（原因见前文 数模转换 一节） 凡是程序实现的随机都是 伪随机。 玩过 Gacha（抽卡，来源于日语的「扭蛋」，ガシャポン(Gasyapon)）手游的应该都知道：程序背后是一个原理不明的黑箱，玩家只能得到 既定的结果 和 纸面上的规则解释，只有游戏厂商才知道 到底做了什么。\n实际上在现实中也确实发生过（且正在进行着）的一件事：你的抽卡永远不可能是真正的随机，而一定是为了游戏体验（或者别的什么东西，比如 日活 / 月活，收入流水，用户留存 等等）特意 人为调整 过的。\n优化后的随机 # 人为调整随机有两种：\n负面意义上有诸如 仓检（仓库检测：检测到你仓库里有相关的要素，就故意 不给你出，来诱导你上头充更多钱继续抽下去）之类的所谓「暗改」； 正面意义上有国家出手规范的 概率必须公布「明示」 和 必须存在保底机制（传闻）两条行业铁则。（否则你还想安安稳稳坐地捞钱？没扣你一个「涉嫌赌博」的帽子责令无限期整改就算好的。） 没有洗赌博的意思，我与毒赌不共戴天。\n现在经由正常司法程序被定开设赌场罪基本没有冤枉这一说。\n赌狗有一个算一个都该死，早点重开挽救家人、造福社会。\n在游戏设计中，人为调整随机结果当然是有意义的。\n我这么说吧，百分之九十的人都受不了 完全没有任何优化 的 纯随机。\n丢一百次硬币，每次都是反面，这离谱吗？离谱。但有可能发生吗？有的。\n你好，真的有的。\n我说真的。\n这种情况 但凡发生一次*，可能就会直接失去一个玩家（愤而退游）。\n这是 运气差的少数人。\n* 而且随着时间流逝 必定会发生（猴子敲莎士比亚全集），因为概率是均匀分布但总体不变的。这大概就是 墨菲定律 的原理。\n中国的相关俗语就多了去了：林子一大了，什么鸟都有；常在河边走，哪有不湿鞋；夜路走多了，总会闯到鬼（鬼到底存不存在另说）……\n一句话：万一呢？总之 无论男女，出门在外都要注意自身（生命和财产）安全。\n现代中国社会相对（世界上其他地区）来说 安全得不得了，但并不是 绝对安全；得益于监控普及和人脸识别 / 步态识别等新技术，电信诈骗之外的暴力刑事案件发生率已经逐年走低了，但 并不为零；所谓君子不立危墙之下。\n至于 运气好的少数人 和 运气一般的大多数人（服从泊松分布）呢，要结合起来看：\n看到 海豹3 晒运气（群众 喜闻乐见 的小概率事件自带话题和流传度，因此必然会传播开来），很多嫉妒到变形（这很正常）的玩家在 丰满的理想 和 骨感的现实 之间巨大反差导致的痛苦下 有一定可能 会退游（心灰意冷）。\n游戏开发者（和发行商）也许 未必会那么在意你的游戏体验如何，但 绝对 非常在乎你「是否愿意为这个游戏买单」：\n对于 向钱看 的人来说，玩家 = 韭菜，你要做的是 想尽一切办法让他们爆金币； 对于在一定程度上脱离了低级趣味、拥有更崇高的追求的人来说，真金白银的销量 同样是能将 对你作品的认可度 量化的、最客观的、最具说服力 的铁证。 欧非二象性 # 那么问题来了，既然 一定要有一个欧洲人，为什么不能是你？\n因为你是你，别人是「别人」。\n打个比方，这颗星球上现在（2024）至少有 80 亿 人，随机在其中抽 1 个 天选之人：\n抽到你的概率是 八十亿分之一； 抽到「别人」的概率是 7,999,999,999 / 8,000,000,000，换算成百分比是 99.9999999875%，小数点后 7 个 9。 这么说能明白吗？\n很简单的道理，因为 你只在乎你自己。\n当然，这无可厚非。此乃人之常情。\n本文不是为了批判什么「自私」「利己」、倡导过于高屋建瓴以至于接近空中楼阁的什么「人类命运共同体」这类高大上(假大空)的命题——人不为己，天诛地灭。\n只是想说明一点：绝大多数情况下，很多人的 盲目乐观 真的没有道理。\n做好合理的预期管理，能让你在「事情」无可奈何、在所难免、覆水难收地发生时，可以不那么地茫然、无助、不知所措。\n根据极限的定义，当 x 趋于 0 的时候，x 不能等于 0。虽然同济版高数上有一句话是「零是可以作为无穷小的唯一的常数」，即「零是无穷小量」，但这也不能拿来作为反驳论据；因为众所周知——两个 无穷小 和 无穷小 之间未必是严格等价的。有没有可能，一个无穷小量 比 另一个无穷小量 要 更小？用一个极度恶俗但很经典的烂梗来表达：我是男的、你爹也是男的，这是不是证明——我是……\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n如果信息存在冗余度，理论上可以舍弃掉这些无意义的垃圾部分，但不可能将信息无损压缩到低于其熵的程度，因为信息包含的某种独特性是不可避免的。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n海豹：无论时间 / 地点 / 场合，但凡有机会，就喜欢 唐突 炫耀自己运气的人。\n「这么喜欢晒（太阳），你是海豹？」\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-07-20 Sat","externalUrl":null,"permalink":"/posts/life/2024/adc-gacha-and-random/","section":"所有文章","summary":"为什么中奖的永远是别人，而你只有在旁边「吸欧气」的份？","title":"浅谈随机性——从模数转换聊到抽卡手游","type":"posts"},{"content":"","date":"2024-07-20 Sat","externalUrl":null,"permalink":"/posts/life/","section":"所有文章","summary":"You Only Live Once","title":"生活","type":"posts"},{"content":"","date":"2024-07-20 Sat","externalUrl":null,"permalink":"/categories/essays/","section":"所有分类","summary":"","title":"杂谈","type":"categories"},{"content":" 游戏里的「攻击速度」到底是个什么概念？ 昨天跟朋友讨论游戏开发的时候聊到了这个话题。\n定义 # 攻击速度（频率）和攻击间隔 # 「攻击速度（Attack Speed）」：指单位时间内进行攻击的快慢程度。\n通常以单位时间内执行的 攻击次数 来衡量，从这个角度来看，一般可以等价于「攻击频率（Attack Frequency）」；不过在我们所熟知的一些语境中，攻击速度 的叫法往往会比 攻击频率 更常见一点。\n较高的 攻击速度 通常意味着 单位时间内进行更多的攻击。\n「攻击间隔（Attack Interval）」：指两次连续攻击之间的时间间隔。\n在一些游戏中（如泰拉瑞亚等）也被称为「使用时间（Use Time）」，即完成一次（攻击）动作所需使用（花掉，cost）的时间。\n二者乍一听好像是同一个概念（同样可以用来描述攻击的快慢），只是说法不同。\n但实际上并不是这样，其实在本质上，两者之间也是完全不同的东西。\n举个例子，我们说在某个游戏中「加攻速」，一般情况下指的是直接增加 攻击速度；\n然而，在另一些游戏里（如 Dota 2 中的基本攻击间隔 BAT），存在游戏内部机制能够缩减 攻击间隔 以达成更频繁地攻击的目的。\n总的来说：\n攻击速度 强调在单位时间内进行攻击动作的 频繁程度。 攻击间隔 强调在连续两次攻击动作之间所需（且必然存在）的 时间间隔。 如果把对 攻击间隔 的描述换一个说法：进行 一次 完整攻击的周期 T，称为 攻击间隔。\n将「一次完整攻击」作为参考标的，则有： $$ \\text{攻击频率(攻击速度)} f = \\frac{1}{\\text{攻击间隔} T} $$\n可以轻易发现 攻击速度 和 攻击间隔 实际上是倒数关系：攻击速度越高，则攻击间隔越短；反之亦然。\n攻击次数（频次） # 此时可以从外部引入其他变量来进一步描述。\n「战斗总时长（TTK，Time To Kill）」：击败敌人所需的全部时间（在此期间视为保持匀速攻击）。\n「攻击频次（Attack Count）」：指在 某一段时间 内执行的攻击动作的数量。\n为了防止和 攻击频率（即 攻击速度）混淆，我们这里就称之为 攻击次数。 $$ \\text{攻击频率(攻击速度)} f = \\frac{\\text{攻击次数} n}{\\text{战斗总时长} \\tau} $$\n最终可得游戏内与攻速相关的各种物理量之间的全部关系： $$ \\text{攻击频率(攻击速度)} f = \\frac{1}{\\text{攻击间隔} T} = \\frac{\\text{攻击次数} n}{\\text{战斗总时长} \\tau} $$\n实际用途 # 基础建模 # 假设一个最简单的模型：\n一次普通攻击（俗称「平 A」），在游戏中的具体效果呈现为给 攻击目标 造成一定量的伤害。\n当任意一方 生命值（俗称「血量」）归零（≤ 0）时，战斗结束。\n我方战败，此处不讨论，因为可以直接视为「游戏失败（Game Over）」另行处理。 敌方战败（且：与此同时，我方存活），则可以根据以上条件计算出我方的战损。 如何将双方的数值计算联立起来？\n当然需要找到一个共享的数值，显然就是本次作战的全部耗时——「战斗总时长（TTK，Time To Kill）」。\n为了简化模型，暂且将战斗双方的 攻击速度（即 攻击频率，等价于 1 / 攻击间隔）视为相同的固定值。且有： $$ \\text{战斗总时长} \\tau = \\text{我方攻击次数} n_1 \\times \\text{我方攻击间隔} T_1 $$\n已经确定 攻击间隔 为固定值（常量），那么如何确定我方 攻击次数 呢？\n很简单，Time To Kill（打到死）： $$ \\text{我方攻击次数} n_1 = \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\tag{公式1} $$ 至于为什么是向上取整，因为如果敌方剩一点血皮没死，肯定不能让他苟住继续作妖；\n你还要补刀，这次「补刀」显然得是一次完整攻击。\n这里的「DPS」严格上说是错误的, 因为这里的值实际上代表 单次攻击能够造成的伤害。\n而真正的 DPS 是 Damage Per Second 每秒造成伤害，与 攻击间隔（而不是 攻击次数）有关。\n这里只是借用这个习惯叫法，MMO 里还常常有把 DPS 视作「总共造成的所有伤害」的约定俗成呢。\n别问，问就是我缩写的其实是「Damage Per Single-attack」。\n敌方明显应该共享这个战斗总时长，因此有： $$ \\text{敌方攻击次数} n_2 \\times \\text{敌方攻击间隔} T_2 = \\text{战斗总时长} \\tau = \\text{我方攻击次数} n_1 \\times \\text{我方攻击间隔} T_1 $$\n约掉双方相等的固定值常量 攻击间隔，则双方 攻击次数 相等；\n再代入 公式1（我方 攻击次数 一式）则有： $$ \\text{敌方攻击次数} n_2 = \\text{我方攻击次数} n_1 = \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\tag{公式2} $$\n那么战损——即在本场战斗中会损失掉的 生命值 为： $$ \\text{我方战损} HP_1 = \\text{敌方单次攻击伤害} DPS_2 \\times \\text{敌方攻击次数} n_2 $$\n代入 公式2（敌方 攻击次数 一式）可得出我方本场战损为： $$ \\text{我方战损} HP_1 = \\text{敌方单次攻击伤害} DPS_2 \\times \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil $$\n引入攻速 # 上面的讨论仅在「双方攻击速度相等」的条件下成立，如果要引入不同的攻速变化呢？\n通过 攻击间隔 和 攻击频率 之间的倒数关系容易想到： $$ \\frac{\\text{我方攻击次数} n_1}{\\text{我方攻击频率(攻击速度)} f_1} = \\text{战斗总时长} \\tau = \\frac{\\text{敌方攻击次数} n_2}{\\text{敌方攻击频率(攻击速度)} f_2} $$\n稍作变换可得： $$ \\text{敌方攻击次数} n_2 = \\lfloor \\frac{\\text{敌方攻击频率(攻击速度)} f_2}{\\text{我方攻击频率(攻击速度)} f_1} \\times \\text{我方攻击次数} n_1 \\rfloor $$ 这里为什么又要向下取整呢？因为当攻速快的那方的最后一次出手——导致战斗结束、胜负已分的那个瞬间，攻速慢的另一方的最后一次攻击显然是 尚未完成 的，因此应该直接舍弃掉结算。\n使用 Excalidraw 绘制 / 字体为 沐瑶软笔手写体 代入上面算出来的 公式1（我方 攻击次数 一式）： $$ \\text{敌方攻击次数} n_2 = \\left\\lfloor \\frac{\\text{敌方攻击频率(攻击速度)} f_2}{\\text{我方攻击频率(攻击速度)} f_1} \\times \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\right\\rfloor $$\n最后可得： $$ \\text{我方战损} HP_1 = \\text{敌方单次攻击伤害} DPS_2 \\times \\left\\lfloor \\frac{\\text{敌方攻击频率(攻击速度)} f_2}{\\text{我方攻击频率(攻击速度)} f_1} \\times \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\right\\rfloor $$\n此处顺便引入简单的攻防系统，伤害计算公式： $$ \\text{单次攻击伤害} DPS = \\text{(攻击者的)攻击力} ATK - \\text{(攻击目标的)防御力} DEF $$\n如此一来，我们就得到了一个神奇的公式：\nclass BattleUnit { constructor(name, health, attack, defense, attackSpeed = 1) { this.name = name; this.health = health; this.attack = attack; this.defense = defense; this.attackSpeed = attackSpeed; } } const hero = new BattleUnit(\u0026#34;Hero\u0026#34;, 100, 25, 10); const enemy = new BattleUnit(\u0026#34;Monster\u0026#34;, 100, 20, 10); hero.dps = hero.attack - enemy.defense; enemy.dps = enemy.attack - hero.defense; hero.attackConut = Math.ceil(enemy.health / hero.dps); enemy.attackConut = Math.floor( (enemy.attackSpeed / hero.attackSpeed) * hero.attackConut, // 这里倒是真的有优化空间: 满足交换律的前提下 **先乘再除** 显然能够减少计算结果误差 // 两个整数乘不出浮点数 两个整数很容易除出浮点数 而浮点数就意味着 *近似值* // 已经取过近似值的浮点数再乘以任何数(我知道 0 / 1 除外, 别杠)都相当于成倍放大误差 // 众所周知在 JS 中 0.1 + 0.2 !== 0.3 // BTW, *判断浮点数是否相等* 的正确姿势是 if (两数相减的差的绝对值 \u0026lt; 你最低能接受的精度误差值) // Math.abs(0.1 + 0.2 - 0.3) \u0026lt; 0.0000000000000001 ); // 为了激励玩家 机制简单的游戏里一般会把敌人原本的攻击次数 -1 以表示玩家永远先出手(而不是比攻速) // 否则本来以你的强度明明可以见面直接秒杀对方 结果进战后无论如何总得吃对面一下 还挺恶心的 // 伤害不高 侮辱性极强 const enemyDamage = enemy.dps * (enemy.attackConut - 1); // 使用公式直接计算出战斗结果的时间复杂度显然为 O(1) 巧妙避开了真正模拟实时战斗的多轮计算 // 不过 作为代价也难以表现出战斗过程的细节 实际开发中需要根据设计目标自行权衡利弊做取舍 if (enemyDamage \u0026lt; hero.health) { console.log( `战斗结束，${hero.name} 击败了 ${ enemy.name }，自己受到了 ${enemyDamage} 点伤害，目前还剩余 ${ hero.health - enemyDamage } 点 HP。`, ); } else { console.log(`战斗结束，${hero.name} 倒在了血泊中。`); } 当然，你可以最后把这个公式的内容全部合并、写成一行，省掉 不必要 的中间变量以期减少（理论上的）内存使用量。\n毕竟傻软 JavaScript 在绝大多数情况下 的赋值行为只会单纯地复制粘贴（而不是引用指针）；\n那只要多定义一个变量（哪怕只是 Number，哪怕只是临时），就得多占一点内存——整整他妈的 8 字节（64 位系统），你敢信？！\n简直是他妈的骇人听闻惨绝人寰恶贯满盈天诛地灭的犯罪！是这个道理吧。\n当然，你还得知道现代（你醒啦，已经是 4202 年了）的编译器 / 解释器乃至运行时——都不是傻子。\n「中间代码优化」了解一下，「常数折叠 / 常数传播（此处不是但这东西确实存在）」了解一下，「tree shaking」了解一下，「自动垃圾回收」了解一下……过早 / 过度优化是一种病；而「声明变量」是开发过程中你最不应该去害怕的东西。\n保证代码的可读性 比 提升人类压根都难以感知的那一丁点效率 的重要性不知高到哪里去了。\n否则像 TypeScript 这种纯粹「画蛇添足」的玩意只要活着就是原罪，连呼吸都有错。（Turbo、Svelte 等的开发者：谁说不是呢？🤣）\n你要真的 辣么 在乎效率，效率比命都要重要，那你还写什么高级语言啊。\n你知道所有 代码含有具体语义（以便人类理解）的编程语言 都叫「高级编程语言」吗？\n因为它们通通都是经过高度封装的，运行源码需要进行大量转译工作（即编译过程）；正常使用场景下哪怕你想、你都很难触及到底层实现。\n如果真那么在乎效率，不如你直接写汇编好了，没有任何中间商（编译器 / 解释器 / 运行时）赚差价；\n不，汇编都配不上你，你应该直接手写机器码——或者更干脆点，打 穿孔纸带 进行编程。\n扩展研究 # 本文只讨论了战斗中单挑（1v1）的情况，如果有大乱斗（多对多），会涉及到另一个非常有趣的概念。\n它就是「兰彻斯特平方律」：简单来说，因为战斗单位阵亡的同时也意味着总体输出减少，优势方的「相对输出比」会像滚雪球般迅速扩大。这个优势的扩张速度（或者说劣势方的崩溃速度）不是线性的，而是平方级的。\n核心原理——从中古开始，战斗单位就是有「生命值 / 血量（某种程度上也包含士气在内）」的，而不是简单地像下棋一样兑子（宏观来看，有时也确实会大道至简地回归到类似兑子的简略模型）；伤害输出和受到的伤害都是平均分配的（数学期望平均，因为战争进程充满了随机性），火力弱、兵力少的一方受到「减员」的影响是必然急速扩大的链式反应。\n正所谓——中国有句古话，叫识时务者为俊杰 兵败如山倒。\n（咱们能用上的）具体应用场景：LOL 控兵线；至于 Dota 有「反补」和「拉野」可操作性和变数都会更多，LOL 就是纯纯的兰彻斯特方程。\n再具体一点、比方说最简单的「推线」，你可以站在兵堆里 A 对方英雄吸引仇恨，对方小兵会转火 A 你；此时你的小兵仍然在 A 对方小兵，双方兵线原本相持不下的战斗力开始产生差距，兵线就推过去了。\n不过这是短期结果，长期来看，由于兵线交汇点推进到了离对方基地更近的地方，对方后续支援的兵线会更快赶到战场形成更大规模的 局部以多打少，兰彻斯特平方律再次生效，于是己方兵线会更迅速地阵亡，之后对方兵线开始反推进，这就是「回推线」。加上对防御塔（的巨额伤害）的考量，因此是否选择把兵线推进塔（的攻击范围）里对「控线」来说非常重要。\n当然了，对方英雄的行动（如果不是人机）由于背后玩家操作的存在，是完全混沌、不可预测（段位越低，反而越难预测 😂）的，这样就变成了动态博弈。这也是 PVP 游戏好玩的地方所在：与人斗，其乐无穷。如果双方的长线策略和临场抉择最后形成了纳什均衡，对线局面就会陷入胶着（「焦灼」感觉是误用），或者说「和平发育 （的垃圾时间）」。\n篇幅有限，这里就不继续多做展开了，有机会再详细讨论（人话：咕）。\n我们有缘再见。\n","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/posts/tech/2024/about-attack-speed/","section":"所有文章","summary":"游戏里的「攻击速度」到底是个什么概念？","title":"浅谈对各种游戏中「攻速」的朴素认知","type":"posts"},{"content":"","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/tags/game-develop/","section":"所有标签","summary":"","title":"游戏开发","type":"tags"},{"content":"前几天刷到一篇文章《策划大佬推荐：可视化模拟游戏数值 / 经济系统，这个神奇工具用过么？》，对文中提到的「游戏经济、玩家进度模拟工具」Machinations.io 非常感兴趣。\n于是就去浅尝了一下。直接说结论吧：非常遗憾，体验并不尽如人意。\n不过，Gamelook 发现，这几个工具中、名为 Machinations.io 的可视化游戏数值模拟工具非常神奇，虽然该工具早在 2018 年就已经推出，但国内游戏圈熟悉它的人真的不多，国内互联网上与之有关的介绍和教程也比较少。\n文中提到这个现象我还有点奇怪，自己试过之后发现 完全不奇怪，太正常了。\n第一印象 # 首先是官网的访问体验，糟糕无比，上来就是完全不讲任何道理的莫名其妙地整个网站白屏。\n但开无痕模式就能正常访问，可能是我浏览器的 uBlock、Duckduckgo 等广告 / 追踪屏蔽插件导致的？\n但我是一点都不想 debug，你配钥匙吗？爱白就白吧。\n还有底部长横幅，高度高达页面七分之一乃至六分之一的巨大 cookies 使用提醒。\n虽然可以手动全部取消，但对只是稍微有点兴趣、抱着了解一下看看的路人来说真的劝退。\n注册试用 # 但没有调查就没有发言权对吧，所以还是耐着性子走完了整个试用流程。\n哪怕只是试用也必须注册账号；甚至注册完进入主站之前还必须得填他们的调查问卷，几乎只能选择他们给定的预设选项的那种问卷（比如用途只有 工作 和 学术研究）。\n潜台词是如果预设的条件如果不符合你的情况，说明你不是他们的目标用户呗？\n实际体验 # 实际使用中经常存在卡顿；多进出了几次甚至出现了整个编辑窗口错位，完全无法继续使用的情况——这不是将不将就的问题，压根没法用明白吧。\n当然，我相信这个只是偶然，但能够出现这么严重影响体验的巨大恶性 bug……只能说对不起他家过于离谱的价格。\n定价完全没有 b 数，最低能够支持「预测（长期走势）」功能的 Essential 计划月付 299 刀（虽然是团队总价），更高一档的 Pro 更是 999 刀。\n对你没看错，每月，一千刀。\n结论 # 东西真是好东西，可惜被令人难绷的运营糟蹋了。\n大公司或许可以考虑吧，独立开发者乃至小工作室都还是别去高攀了。\n人家看不上你这点「格局」的。\n","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/posts/tech/2024/machinations-test/","section":"所有文章","summary":"乘兴而来，败兴而归。","title":"Machinations 超简略测评","type":"posts"},{"content":"","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/categories/develop-tools/","section":"所有分类","summary":"","title":"开发工具","type":"categories"},{"content":"当年的 Steam「四大名著（褒贬不一）」之一。\n能够莫名其妙引发人产生哲学思辨的奇怪小品。\nWELCOME TO MOUNTAIN\nYOU ARE MOUNTAIN\nYOU ARE GOD 操作说明 # 本文所有 旋律 里的 空格 都是仅仅为了 便于阅读 或 更好的演出效果；\n无任何其他特殊作用。（你手速快连着弹也是可以的） 数字键 1 ~ 3 可以调整窗口大小：小窗口 / 大窗口 / 全屏。\n5 据说是 VR，我没有试过。 按住 鼠标左键 拖动可转动视角。 鼠标滚轮 调整镜头距离。 空格键 Space 减缓 / 恢复时间流逝速度。 按下 ZXCVBNM, 和 ASDFGHJK 演奏音符。（你就当它是钢琴。没错，这是个音游）\n弹奏旋律 ASA, MNBV CVV 可解锁第三行键盘（QWERTYUI）。 随着时间流逝，（山）可能会产生各种想法（？）。\n弹奏旋律 M,KJ 或者直接按下快捷键 . 立刻产生想法。 随着时间流逝，（山上）可能会出现各种天气。\n其他天气（包括雪）可以通过特定旋律召唤，但 雨 只能通过自然产生；\n当下雨时，按住左键摇晃山体可以把积雨云甩掉，中止下雨。 对山上的物品按住 鼠标左键 可以将物品拔出，松开可以让物品重新落回山上。\n落下的物品会砸毁树木；\n如果出现留声机，点击可以播放音乐，据说是 Albert Bowlly 的《Night and Day》《All I Do is Dream of You》《Dreaming》其中之一；\n有极小概率会出现炸弹，点击可以引爆（有成就）。 存档位置位于 C:\\Users\\[用户名]\\AppData\\LocalLow\\David OReilly\\Mountain。\n开局（创建新存档时）让你画的 3 幅画也会保存在这里。 界面介绍 # 右上角（快捷键 P）：设置 左下角（快捷键 Space）：减缓 / 恢复时间流逝速度 右下角：展开 / 收起软键盘 界面中的官方中文是狗屁不通的迷惑机翻（不过对具体心声的翻译倒是没啥问题），实际含义本文已经另行标注。\n设置界面 # 左上：\nTHOUGHTS（心思）：（山(你)的）想法，心声，内心 OS SOUND（声音）：音效 AUTO CAM（自动相机）：自动移动镜头 右上：\n切换语言：英 / 日 / 中 左下：\nCREDITS（学分）：制作人员名单 右下：\nEVERYTHING（万事）：作者另一部作品《Everything》的 Steam 页面 MOUNTAIN ON IOS（在 IOS 山上）：IOS 版的 App Store 引流链接 隐藏菜单界面 # 弹奏旋律 FS,N,SFS,N,S,\n——德彪西《La Fille aux Cheveau（亚麻色头发的少女）》解锁。\n解锁后，右上角的设置按钮下面会出现一个新的加号按钮（快捷键 O），点击可以打开隐藏菜单界面。\n这里的上半部分是各种按钮：\n能够记忆你 曾经弹奏过的 召唤异常天气的特殊旋律 BLOOD（血液）MMM MMM ,MN AB\n——贝多芬《Moonlight Sonata（月光奏鸣曲）》 FROGS（青蛙）BB AA SS A ,, MM NN B\n——《Twinkle Twinkle Little Star（一闪一闪亮晶晶）》 FISH（鱼）CXZX CCC XXX CBB\n——《Mary Had A Little Lamb》 COINS（硬币，其实是金币）CCC CCC CBZX C\n——《Jingle Bells（铃儿响叮当）》 HEARTS（心中，爱心）SSF SSF SFJH GGF\n——约翰内斯·勃拉姆斯《Lullaby（摇篮曲）》 FLAMES（火焰，火流星雨）CVBN MBM\n——柴可夫斯基《Swan Lake（天鹅湖）》 SNOWGLOBE（雪球，其实是 雪景球，一种常见桌面摆件）BBBB BCB\n——《Winter Wonderland》 3RD ROW（第三排）右下角按钮打开的软键盘是否显示第三排按键 调整降下 ARTEFACTS（文物，人造物品）的速度 VMVM AMAM ADAD ADGN ANAD\n——《Ride of the Valkyries（女武神的骑行）》 OFF（关闭） SOME（一些） MANY（很多） 其他 FOG（雾） PRECIP（沉淀）我也没搞懂什么意思，为什么翻译成 沉淀 也毫无头绪 ECHO（回声） LOAD（重装）立刻 重开新档，慎用 SBN ,AS SSS REGEN（再生）清理山上的杂物 SSS, AAAM\n——贝多芬《Fifth Symphony（第五交响曲，即命运交响曲）》 弹奏旋律 AS,ZB《Close Encounters of The Third Kind（第三类接触，同名电影主题曲）》可以召唤能够毁灭山的随机天外陨石。\n（当陨石靠近大气层时，可以通过疯狂敲键盘让大气层维持在蓝色来抵御陨石。）\n（这个蓝色大气层同样能够阻挡 人造物品 落到山上。）\n（另外，狂按键盘同样也能加速时间流逝。）\n下半部分是游戏的统计数据：\n版本号 MOUNTAIN 2.0.1 当前（山）在宇宙中的位置图（众所周知，行星上的 季节变化 由 公转周期 决定） （山的）年龄、雨、雪、树木（数量）、植物（数量）、事物（人造物品数量） 逆天成就相关 # How to Obtain the \u0026ldquo;YOU ARE GOD\u0026rdquo; Achievement 《山》At least I know I\u0026rsquo;m alive 成就快速达成攻略 乐谱推荐 # 键盘映射关系如下表所示，♯ 是升号（Sharp），♭ 是降号（Flat）。\n具体论证见《How to Experience Mountain》。\n当然了，这游戏再怎么样也比不上专业乐器，图个一乐就行了。\n键盘与音符 映射关系 Q W E R T Y U I A♯/B♭ C C♯/D♭ D♯/E♭ F F♯/G♭ G♯/A♭ A♯/B♭ A S D F G H J K G♯/A♭ A♯/B♭ C C♯/D♭ D♯/E♭ F F♯/G♭ G♯/A♭ Z X C V B N M , F♯/G♭ G♯/A♭ A♯/B♭ C C♯/D♭ D♯/E♭ F F♯/G♭ 优秀的钢琴软件《山》的乐谱分享 《Mountain》山乐器 自制曲谱集 by Fool Fish 自动化脚本 # 见 这个仓库里的 mountain.ahk，用 AutoHotKey 写的。\n（这辈子都不可能去用 按键精灵 这种整个站在优雅二字对立面的笨比玩意的。）\n源码明文未经编译，运行前需要自行安装好 AHK 环境。\n注释一看就懂，使用方法不再赘述。\n","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/posts/game/2017/mountain-walkthrough/","section":"所有文章","summary":"\u003cp\u003e当年的 Steam「四大名著（\u003cdel\u003e褒贬不一\u003c/del\u003e）」之一。\u003cbr\u003e\n能够莫名其妙引发人产生哲学思辨的奇怪小品。\u003c/p\u003e","title":"「山」简要攻略","type":"posts"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/categories/idle-game/","section":"所有分类","summary":"","title":"放置类游戏","type":"categories"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/tags/game-achievements/","section":"所有标签","summary":"","title":"游戏成就","type":"tags"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/tags/game-tips/","section":"所有标签","summary":"","title":"游戏攻略","type":"tags"},{"content":" Personal Blog Content # ℹ️ Note Hugo content of Everybody Wants Some (ews.ink).\nGit submodule of unacro/blog\n","externalUrl":null,"permalink":"/readme/","section":"Blog Homepage","summary":"Personal Blog Content # ℹ️ Note Hugo content of Everybody Wants Some (ews.","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" 如果本网站的任何内容无意中侵犯了您的版权或利益，请及时与我联系，我将采取适当行动。 除非另有特殊说明，否则 本站 所有内容均在 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 许可下授权。\n以下是该 许可证 的人类可读摘要（而不是替代）。\n您可以自由地： # 共享 — 在任何媒介以任何形式复制、发行本作品 演绎 — 修改、转换或以本作品为基础进行创作 只要你遵守许可协议条款，许可人就无法收回你的这些权利。\n惟须遵守下列条件： # 署名 — 您必须给出 适当的署名，提供指向本许可协议的链接，同时 标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。 非商业性使用 — 您不得将本作品用于 商业目的。 相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于 与原先许可协议相同的许可协议 分发您贡献的作品。 没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。 声明： # 您不必因为公共领域的作品要素而遵守许可协议，或者您的使用被可适用的 例外或限制 所允许。 不提供担保。许可协议可能不会给与您意图使用的所必须的所有许可。例如，其他权利比如 形象权、隐私权 或 人格权 可能限制您如何使用作品。 署名-非商业性使用-相同方式共享 4.0 国际许可证\n","externalUrl":null,"permalink":"/copyright/","section":"Blog Homepage","summary":"","title":"版权声明","type":"page"},{"content":"","externalUrl":null,"permalink":"/tags/philosophy-of-life/","section":"所有标签","summary":"","title":"处世哲学","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/factory-game/","section":"所有分类","summary":"","title":"工厂类游戏","type":"categories"},{"content":" 关于本站 # 由 Hugo \u0026amp; Congo 强力驱动 全站默认字体使用 霞鹜文楷，由 CMBill 分发 Todo # 修改全站字体（使用了 霞鹜文楷屏幕阅读版，由 CMBill 分发） 站点 favicon 优化 katex 公式样式 整理博客文章的文件目录结构（按 年份 组织项目文件） 去掉单页的文章头 meta 信息 新增宽版文章排版 美化滚动条样式 关于页面最后添加本博客发展时间轴 关于我 # Smart enough to know better, stupid enough to do it anyway.\n时间线 # header badge test subheader Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. Another Awesome Header date - present Awesome Subheader With html code Coffee Tea Milk Shortcodes AWESOME With other shortcodes Another Awesome Header nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 1321 378 ","externalUrl":null,"permalink":"/about/","section":"Blog Homepage","summary":"","title":"关于","type":"page"},{"content":"","externalUrl":null,"permalink":"/categories/card-game/","section":"所有分类","summary":"","title":"卡牌游戏","type":"categories"},{"content":" 还就那个点子王 开发 # Todo\n游戏 # 《缺氧》官方 debug 模式下的选区功能 \u0026amp; 模组 Blueprints fixed 都能将指定的区域信息保存到本地文件。\n能否开发一个网站读取这类文件并将其渲染为分层概览，以便更好地抄作业 参考模块设计？ 《药剂工艺：炼金模拟器》于 2023.12.13 的 v1.1 更新 让大多数游戏机制与帧率解耦（不再挂钩）。\n这是否意味着可以利用模拟按键类工具实现类似 TAS 的效果？ 生活 # Todo\n","externalUrl":null,"permalink":"/ideas/","section":"Blog Homepage","summary":"","title":"灵感 \u0026 计划","type":"page"},{"content":"","externalUrl":null,"permalink":"/series/cult-of-the-lamb/","section":"所有系列","summary":"","title":"咩咩启示录","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/oxygen-not-included/","section":"所有系列","summary":"","title":"缺氧","type":"series"},{"content":"","externalUrl":null,"permalink":"/categories/survival-game/","section":"所有分类","summary":"","title":"生存类游戏","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/inscryption/","section":"所有系列","summary":"","title":"邪恶冥刻","type":"series"},{"content":"包括但不限于处于 正在进行中 / 无限期搁置 等状态的项目。且随时可能互相转换。\n","externalUrl":null,"permalink":"/projects/","section":"已经开始动工的企划","summary":"\u003cdel\u003e凭本事挖的坑，为什么要填？\u003c/del\u003e","title":"已经开始动工的企划","type":"projects"},{"content":"","externalUrl":null,"permalink":"/series/shapez/","section":"所有系列","summary":"","title":"异形工厂","type":"series"},{"content":"","externalUrl":null,"permalink":"/categories/game-tools/","section":"所有分类","summary":"","title":"游戏工具","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/game-bestiary/","section":"所有标签","summary":"","title":"游戏图鉴","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/farm-game/","section":"所有分类","summary":"","title":"种田游戏","type":"categories"}]