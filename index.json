[{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/tags/blog/","section":"所有标签","summary":"","title":"Blog","type":"tags"},{"content":"\n","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/","section":"Blog Homepage","summary":"","title":"Blog Homepage","type":"page"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/categories/blogging/","section":"所有分类","summary":"","title":"Blogging","type":"categories"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/tags/hugo/","section":"所有标签","summary":"","title":"Hugo","type":"tags"},{"content":" Why # 我这人有个毛病，很难与 必定混沌的现实 和谐相处；过于习惯 滥用……所谓的「断舍离」。\n简单点说，精神洁癖。\n只要我关注某个话题，我必然会产生各种各样的想法。\n如果我无动于衷、转头就忘掉，那还好；一旦我试图 于某处 记录下这些想法—— 持续的更新 意味着 规模的扩大，意味着 不断的熵增，意味着 混乱与无序。 这是不以人的意志为转移的宇宙规律、自然法则；无论你用何种、多高级、再优秀的 知识归纳 方法论，都无法解决这个问题。\n这是 热力学第二定律 确定的：熵增（信息熵也是熵）过程每时每刻都成立，永不停止，无法逆转。\n万一你 觉得 你可以做到——恭喜你，你发明了 第二类永动机。\n拓展到编程方面，这就是目前被越来越多人所认同的一条行业规律：\n功能是 100% 的资产，但源码是 100% 的债务。\n你写的每一行代码都是屎山，每一行。当然，我也是；这世上的任何一个人都是。 软件开发的过程是一个博弈，或者通俗点说，赛跑 过程。\n你要做的就是在 项目必然变成屎山的过程 中 尽可能快 地实现你需要的功能（需求）。\n如果你跑赢了，它（最终成果）就是你的产品；\n如果你跑输了——很正常，想必大家手里都攒了不少这种东西。\n当然，合理的代码规范和 Code Review 仍然是相当有意义的。\n它们至少减缓了项目变成屎山的速度，给出更多操作空间，让你在赛跑过程中更有余裕。\n回到写作方面，前面说到，信息的堆积必定导致混乱与无序。\n而我由于个人原因很难容忍这种混乱与无序，我往往会选择一种简单粗暴的解决方法。\n用高级点的说法叫「归档」（以备日后查阅）；其实就是封存起来，丢到一边吃灰。\n很简单的道理：眼不见心不烦。\n说出来你可能不信，我写博客差不多有十年了。\n但现在（本站）什么样子，大家有目共睹。\n对于（博客）网站本身也是，不说每年，基本隔个两年就要重建一次：\n换风格、换主题、换框架、换技术栈。\n而且基本上每次重新建立后，我回过头读自己以前的文章都觉得不忍卒睹，至少也是「有很大的提升空间」。\n因此我会把以前已经发布的文章和未发布的存稿全都一股脑丢进 inbox，伺机再议(有缘再见) 。\n与其说是「重建」，不如说是「重置」。\nWhich # 动态还是静态 # 当然是静态。\n只说个人博客，在线编辑 / 即时更新 绝对是伪需求。\n如果你真的那么在乎文章发布的实时性，那就更应该 提前 做好编辑 \u0026amp; 发布的准备工作，而不是到点了才上赶着临时抱佛脚。\n动态博客的复杂度是降不下去的。环节越多，破绽必然越多，安全性和稳定性一定越低。\n2023 年初 阮一峰的博客被黑 沦为笑柄很多人都知道吧。引以为戒干嘛，接着笑啊。\n而静态博客就可以把整站内容方便快捷、干净利落地托管给 CDN 服务商等 PaaS 平台，放心坐享成熟的配套服务。\n用什么框架 # 我反正选择 Hugo，理由：开源免费、性能优秀、功能强大、生态丰富、更新活跃。\n我确定这不是路径依赖。众所周知，我是一个将「生命在于运动(折腾) 」奉为圭臬的人。\n一线有什么最新技术涌现，我是非常乐意尝鲜的。\n相当炫酷的 Astro 确实很有意思，但那些花里胡哨的功能我的 博客 真的用不到，就用奥卡姆剃刀（如非必要，勿增实体）剃掉了。\n基于个人美学，我还是比较希望自己的博客有更纯粹的写作和阅读体验。\nHugo extended or not # 可能很多刚开始上手 Hugo 的人都会对迷惑于：普通的 hugo 和 hugo-extended 之间有什么区别？我应该选用哪一个？\n一个简单粗暴的解决方案是 无脑选择功能（兼容性）更强的 extended 版，只要你用来运行 Hugo 的设备没有性能瓶颈问题*。\n* 存在性能问题：没开玩笑，这种情况是有可能发生的。\n比如我的 Raspberry Pi 3B+，我明确记得数年前 Hugo 官方的构建链是不含 arm 架构在内的，我想在树莓派上跑最新版的 Hugo 必须自行编译。\n然后我惊讶地发现 3B+ 跑 Hugo 的 extended 版居然蛮吃力的。当然我机子的散热不太行，可能也占了很大因素。\n如果你和我一样是喜欢追根究底的好奇宝宝，以下是结论。\n根据 bep 在 文档仓库 #1152 里的说法：\n「唯一」的 主要 功能区别是——是否支持 SASS/SCSS（显然仅 extended 支持）。 其实还有 图像处理——主要是编码 webp；解码（读取）webp 所有版本都支持。 而其他的，包括 PostCSS 在内的一堆功能，常规版都支持（AI 可能会有不同看法）。 即：extended 版是常规版的超集。\n应该没多少人是不用主题或者自己写主题的吧？\n那么，是否需要 extended 版 其实取决于 你选用的主题 的依赖。\n甚至哪怕你选择的主题用了 SASS/SCSS，但如果该主题提前把编译好的样式加进了 /resources 目录，你仍然可以运行常规版来使用这个主题。\n我个人还是建议：只要你用的机器没拉到带 Hugo 都费劲，无脑上 extended 总归没错。\n用什么主题 # 曾经一度被 Dejavu Moe 种草过 Congo，属实优雅。\n当时没有立刻换是因为实在是太素了，在功能性上并不是很吸引我。\n后来 Blowfish 出现，一直有在关注。\n但那时候我特别反感的一点是：Blowfish 明明是 Congo 的 fork，但在 README 和文档中只字不提，然后还开了捐助通道，真的挺那啥的。\n在这个阶段我还是倾向于 Congo 的。\n直到现在，Blowfish 在 文档 中声明了：\n该主题是 Congo 的一个分支，并进行了 大量 扩展。\n算是勉强洗白。\n并且 Congo 的更新频率（2024.4.17 v2.8.2）确实不如 Blowfish（2024 8.10 v2.75.0）。\n本次重置博客最终决定选用 Blowfish。\nHow # 安装 Hugo # 人生苦短，我用 Scoop：\nscoop install hugo-extended 新建项目 # 基本操作，没啥好说的：\nhugo new site new-blog cd new-blog git init 安装 Blowfish 主题 # 具体细节可以参考《Blowfish 文档 - 安装和配置》。\n我电脑上有 Go，所以我选择依托于 Go 的包管理器实现的 Hugo Modules 来安装主题。\n如果你更喜欢通过 Git 子模块安装主题，也没什么问题。\n唯一需要注意的一点区别：\nHugo Modules 方式：通过读取配置文件里 module 表中的信息 依次加载 声明的依赖模块，无需其他额外配置。 Git Submodule 方式：先用 Git 将主题仓库 clone 到本地的 /themes 目录下，再通过配置文件里的 theme 字段 明确指定 使用某个主题。 配置 Blowfish 主题 # 详见《Blowfish 文档 - 入门指南》。\n至于我的私心偏好会另开一篇文章。\n","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/posts/tech/2024/hugo-blog-remastered/","section":"所有文章","summary":"","title":"第一千零一次重置博客","type":"posts"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/posts/tech/","section":"所有文章","summary":"Talk is cheap, show me your code.","title":"科技","type":"posts"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/tags/","section":"所有标签","summary":"","title":"所有标签","type":"tags"},{"content":"","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/categories/","section":"所有分类","summary":"","title":"所有分类","type":"categories"},{"content":" 列表页 Todo：\n默认隐藏创建时间 / 修改时间 / 字数统计 / 阅读时间\n默认显示摘要 ","date":"2024-08-08 Thu","externalUrl":null,"permalink":"/posts/","section":"所有文章","summary":"","title":"所有文章","type":"posts"},{"content":" 游戏里的「攻击速度」到底是个什么概念？ 昨天跟朋友讨论游戏开发的时候聊到了这个话题。\n定义 # 攻击速度（频率）和攻击间隔 # 「攻击速度（Attack Speed）」：指单位时间内进行攻击的快慢程度。\n通常以单位时间内执行的 攻击次数 来衡量，从这个角度来看，一般可以等价于「攻击频率（Attack Frequency）」；不过在我们所熟知的一些语境中，攻击速度 的叫法往往会比 攻击频率 更常见一点。\n较高的 攻击速度 通常意味着 单位时间内进行更多的攻击。\n「攻击间隔（Attack Interval）」：指两次连续攻击之间的时间间隔。\n在一些游戏中（如泰拉瑞亚等）也被称为「使用时间（Use Time）」，即完成一次（攻击）动作所需使用（花掉，cost）的时间。\n二者乍一听好像是同一个概念（同样可以用来描述攻击的快慢），只是说法不同。\n但实际上并不是这样，其实在本质上，两者之间也是完全不同的东西。\n举个例子，我们说在某个游戏中「加攻速」，一般情况下指的是直接增加 攻击速度；\n然而，在另一些游戏里（如 Dota 2 中的基本攻击间隔 BAT），存在游戏内部机制能够缩减 攻击间隔 以达成更频繁地攻击的目的。\n总的来说：\n攻击速度 强调在单位时间内进行攻击动作的 频繁程度。 攻击间隔 强调在连续两次攻击动作之间所需（且必然存在）的 时间间隔。 如果把对 攻击间隔 的描述换一个说法：进行 一次 完整攻击的周期 T，称为 攻击间隔。\n将「一次完整攻击」作为参考标的，则有： $$ \\text{攻击频率(攻击速度)} f = \\frac{1}{\\text{攻击间隔} T} $$\n可以轻易发现 攻击速度 和 攻击间隔 实际上是倒数关系：攻击速度越高，则攻击间隔越短；反之亦然。\n攻击次数（频次） # 此时可以从外部引入其他变量来进一步描述。\n「战斗总时长（TTK，Time To Kill）」：击败敌人所需的全部时间（在此期间视为保持匀速攻击）。\n「攻击频次（Attack Count）」：指在 某一段时间 内执行的攻击动作的数量。\n为了防止和 攻击频率（即 攻击速度）混淆，我们这里就称之为 攻击次数。 $$ \\text{攻击频率(攻击速度)} f = \\frac{\\text{攻击次数} n}{\\text{战斗总时长} \\tau} $$\n最终可得游戏内与攻速相关的各种物理量之间的全部关系： $$ \\text{攻击频率(攻击速度)} f = \\frac{1}{\\text{攻击间隔} T} = \\frac{\\text{攻击次数} n}{\\text{战斗总时长} \\tau} $$\n实际用途 # 基础建模 # 假设一个最简单的模型：\n一次普通攻击（俗称「平 A」），在游戏中的具体效果呈现为给 攻击目标 造成一定量的伤害。\n当任意一方 生命值（俗称「血量」）归零（≤ 0）时，战斗结束。\n我方战败，此处不讨论，因为可以直接视为「游戏失败（Game Over）」另行处理。 敌方战败（且：与此同时，我方存活），则可以根据以上条件计算出我方的战损。 如何将双方的数值计算联立起来？\n当然需要找到一个共享的数值，显然就是本次作战的全部耗时——「战斗总时长（TTK，Time To Kill）」。\n为了简化模型，暂且将战斗双方的 攻击速度（即 攻击频率，等价于 1 / 攻击间隔）视为相同的固定值。且有： $$ \\text{战斗总时长} \\tau = \\text{我方攻击次数} n_1 \\times \\text{我方攻击间隔} T_1 $$\n已经确定 攻击间隔 为固定值（常量），那么如何确定我方 攻击次数 呢？\n很简单，Time To Kill（打到死）： $$ \\text{我方攻击次数} n_1 = \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\tag{公式1} $$ 至于为什么是向上取整，因为如果敌方剩一点血皮没死，肯定不能让他苟住继续作妖；\n你还要补刀，这次「补刀」显然得是一次完整攻击。\n这里的「DPS」严格上说是错误的, 因为这里的值实际上代表 单次攻击能够造成的伤害。\n而真正的 DPS 是 Damage Per Second 每秒造成伤害，与 攻击间隔（而不是 攻击次数）有关。\n这里只是借用这个习惯叫法，MMO 里还常常有把 DPS 视作「总共造成的所有伤害」的约定俗成呢。\n别问，问就是我缩写的其实是「Damage Per Single-attack」。\n敌方明显应该共享这个战斗总时长，因此有： $$ \\text{敌方攻击次数} n_2 \\times \\text{敌方攻击间隔} T_2 = \\text{战斗总时长} \\tau = \\text{我方攻击次数} n_1 \\times \\text{我方攻击间隔} T_1 $$\n约掉双方相等的固定值常量 攻击间隔，则双方 攻击次数 相等；\n再代入 公式1（我方 攻击次数 一式）则有： $$ \\text{敌方攻击次数} n_2 = \\text{我方攻击次数} n_1 = \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\tag{公式2} $$\n那么战损——即在本场战斗中会损失掉的 生命值 为： $$ \\text{我方战损} HP_1 = \\text{敌方单次攻击伤害} DPS_2 \\times \\text{敌方攻击次数} n_2 $$\n代入 公式2（敌方 攻击次数 一式）可得出我方本场战损为： $$ \\text{我方战损} HP_1 = \\text{敌方单次攻击伤害} DPS_2 \\times \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil $$\n引入攻速 # 上面的讨论仅在「双方攻击速度相等」的条件下成立，如果要引入不同的攻速变化呢？\n通过 攻击间隔 和 攻击频率 之间的倒数关系容易想到： $$ \\frac{\\text{我方攻击次数} n_1}{\\text{我方攻击频率(攻击速度)} f_1} = \\text{战斗总时长} \\tau = \\frac{\\text{敌方攻击次数} n_2}{\\text{敌方攻击频率(攻击速度)} f_2} $$\n稍作变换可得： $$ \\text{敌方攻击次数} n_2 = \\lfloor \\frac{\\text{敌方攻击频率(攻击速度)} f_2}{\\text{我方攻击频率(攻击速度)} f_1} \\times \\text{我方攻击次数} n_1 \\rfloor $$ 这里为什么又要向下取整呢？因为当攻速快的那方的最后一次出手——导致战斗结束、胜负已分的那个瞬间，攻速慢的另一方的最后一次攻击显然是 尚未完成 的，因此应该直接舍弃掉结算。\n使用 Excalidraw 绘制 / 字体为 沐瑶软笔手写体 代入上面算出来的 公式1（我方 攻击次数 一式）： $$ \\text{敌方攻击次数} n_2 = \\left\\lfloor \\frac{\\text{敌方攻击频率(攻击速度)} f_2}{\\text{我方攻击频率(攻击速度)} f_1} \\times \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\right\\rfloor $$\n最后可得： $$ \\text{我方战损} HP_1 = \\text{敌方单次攻击伤害} DPS_2 \\times \\left\\lfloor \\frac{\\text{敌方攻击频率(攻击速度)} f_2}{\\text{我方攻击频率(攻击速度)} f_1} \\times \\lceil \\frac{\\text{敌方总血量} HP_2}{\\text{我方单次攻击伤害} DPS_1} \\rceil \\right\\rfloor $$\n此处顺便引入简单的攻防系统，伤害计算公式： $$ \\text{单次攻击伤害} DPS = \\text{(攻击者的)攻击力} ATK - \\text{(攻击目标的)防御力} DEF $$\n如此一来，我们就得到了一个神奇的公式：\nclass BattleUnit { constructor(name, health, attack, defense, attackSpeed = 1) { this.name = name; this.health = health; this.attack = attack; this.defense = defense; this.attackSpeed = attackSpeed; } } const hero = new BattleUnit(\u0026#34;Hero\u0026#34;, 100, 25, 10); const enemy = new BattleUnit(\u0026#34;Monster\u0026#34;, 100, 20, 10); hero.dps = hero.attack - enemy.defense; enemy.dps = enemy.attack - hero.defense; hero.attackConut = Math.ceil(enemy.health / hero.dps); enemy.attackConut = Math.floor( (enemy.attackSpeed / hero.attackSpeed) * hero.attackConut, // 这里倒是真的有优化空间: 满足交换律的前提下 **先乘再除** 显然能够减少计算结果误差 // 两个整数乘不出浮点数 两个整数很容易除出浮点数 而浮点数就意味着 *近似值* // 已经取过近似值的浮点数再乘以任何数(我知道 0 / 1 除外, 别杠)都相当于成倍放大误差 // 众所周知在 JS 中 0.1 + 0.2 !== 0.3 // BTW, *判断浮点数是否相等* 的正确姿势是 if (两数相减的差的绝对值 \u0026lt; 你最低能接受的精度误差值) // Math.abs(0.1 + 0.2 - 0.3) \u0026lt; 0.0000000000000001 ); // 为了激励玩家 机制简单的游戏里一般会把敌人原本的攻击次数 -1 以表示玩家永远先出手(而不是比攻速) // 否则本来以你的强度明明可以见面直接秒杀对方 结果进战后无论如何总得吃对面一下 还挺恶心的 // 伤害不高 侮辱性极强 const enemyDamage = enemy.dps * (enemy.attackConut - 1); // 使用公式直接计算出战斗结果的时间复杂度显然为 O(1) 巧妙避开了真正模拟实时战斗的多轮计算 // 不过 作为代价也难以表现出战斗过程的细节 实际开发中需要根据设计目标自行权衡利弊做取舍 if (enemyDamage \u0026lt; hero.health) { console.log( `战斗结束，${hero.name} 击败了 ${ enemy.name }，自己受到了 ${enemyDamage} 点伤害，目前还剩余 ${ hero.health - enemyDamage } 点 HP。`, ); } else { console.log(`战斗结束，${hero.name} 倒在了血泊中。`); } 当然，你可以最后把这个公式的内容全部合并、写成一行，省掉 不必要 的中间变量以期减少（理论上的）内存使用量。\n毕竟傻软 JavaScript 在绝大多数情况下 的赋值行为只会单纯地复制粘贴（而不是引用指针）；\n那只要多定义一个变量（哪怕只是 Number，哪怕只是临时），就得多占一点内存——整整他妈的 8 字节（64 位系统），你敢信？！\n简直是他妈的骇人听闻惨绝人寰恶贯满盈天诛地灭的犯罪！是这个道理吧。\n当然，你还得知道现代（你醒啦，已经是 4202 年了）的编译器 / 解释器乃至运行时——都不是傻子。\n「中间代码优化」了解一下，「常数折叠 / 常数传播（此处不是但这东西确实存在）」了解一下，「tree shaking」了解一下，「自动垃圾回收」了解一下……过早 / 过度优化是一种病；而「声明变量」是开发过程中你最不应该去害怕的东西。\n保证代码的可读性 比 提升人类压根都难以感知的那一丁点效率 的重要性不知高到哪里去了。\n否则像 TypeScript 这种纯粹「画蛇添足」的玩意只要活着就是原罪，连呼吸都有错。（Turbo、Svelte 等的开发者：谁说不是呢？🤣）\n你要真的 辣么 在乎效率，效率比命都要重要，那你还写什么高级语言啊。\n你知道所有 代码含有具体语义（以便人类理解）的编程语言 都叫「高级编程语言」吗？\n因为它们通通都是经过高度封装的，运行源码需要进行大量转译工作（即编译过程）；正常使用场景下哪怕你想、你都很难触及到底层实现。\n如果真那么在乎效率，不如你直接写汇编好了，没有任何中间商（编译器 / 解释器 / 运行时）赚差价；\n不，汇编都配不上你，你应该直接手写机器码——或者更干脆点，打 穿孔纸带 进行编程。\n扩展研究 # 本文只讨论了战斗中单挑（1v1）的情况，如果有大乱斗（多对多），会涉及到另一个非常有趣的概念。\n它就是「兰彻斯特平方律」：简单来说，因为战斗单位阵亡的同时也意味着总体输出减少，优势方的「相对输出比」会像滚雪球般迅速扩大。这个优势的扩张速度（或者说劣势方的崩溃速度）不是线性的，而是平方级的。\n核心原理——从中古开始，战斗单位就是有「生命值 / 血量（某种程度上也包含士气在内）」的，而不是简单地像下棋一样兑子（宏观来看，有时也确实会大道至简地回归到类似兑子的简略模型）；伤害输出和受到的伤害都是平均分配的（数学期望平均，因为战争进程充满了随机性），火力弱、兵力少的一方受到「减员」的影响是必然急速扩大的链式反应。\n正所谓——中国有句古话，叫识时务者为俊杰 兵败如山倒。\n（咱们能用上的）具体应用场景：LOL 控兵线；至于 Dota 有「反补」和「拉野」可操作性和变数都会更多，LOL 就是纯纯的兰彻斯特方程。\n再具体一点、比方说最简单的「推线」，你可以站在兵堆里 A 对方英雄吸引仇恨，对方小兵会转火 A 你；此时你的小兵仍然在 A 对方小兵，双方兵线原本相持不下的战斗力开始产生差距，兵线就推过去了。\n不过这是短期结果，长期来看，由于兵线交汇点推进到了离对方基地更近的地方，对方后续支援的兵线会更快赶到战场形成更大规模的 局部以多打少，兰彻斯特平方律再次生效，于是己方兵线会更迅速地阵亡，之后对方兵线开始反推进，这就是「回推线」。加上对防御塔（的巨额伤害）的考量，因此是否选择把兵线推进塔（的攻击范围）里对「控线」来说非常重要。\n当然了，对方英雄的行动（如果不是人机）由于背后玩家操作的存在，是完全混沌、不可预测（段位越低，反而越难预测 😂）的，这样就变成了动态博弈。这也是 PVP 游戏好玩的地方所在：与人斗，其乐无穷。如果双方的长线策略和临场抉择最后形成了纳什均衡，对线局面就会陷入胶着（「焦灼」感觉是误用），或者说「和平发育 （的垃圾时间）」。\n篇幅有限，这里就不继续多做展开了，有机会再详细讨论（人话：咕）。\n我们有缘再见。\n","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/posts/tech/2024/about-attack-speed/","section":"所有文章","summary":"游戏里的「攻击速度」到底是个什么概念？","title":"浅谈对各种游戏中「攻速」的朴素认知","type":"posts"},{"content":"","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/tags/game-develop/","section":"所有标签","summary":"","title":"游戏开发","type":"tags"},{"content":"前几天刷到一篇文章《策划大佬推荐：可视化模拟游戏数值 / 经济系统，这个神奇工具用过么？》，对文中提到的「游戏经济、玩家进度模拟工具」Machinations.io 非常感兴趣。\n于是就去浅尝了一下。直接说结论吧：非常遗憾，体验并不尽如人意。\n不过，Gamelook 发现，这几个工具中、名为 Machinations.io 的可视化游戏数值模拟工具非常神奇，虽然该工具早在 2018 年就已经推出，但国内游戏圈熟悉它的人真的不多，国内互联网上与之有关的介绍和教程也比较少。\n文中提到这个现象我还有点奇怪，自己试过之后发现 完全不奇怪，太正常了。\n第一印象 # 首先是官网的访问体验，糟糕无比，上来就是完全不讲任何道理的莫名其妙地整个网站白屏。\n但开无痕模式就能正常访问，可能是我浏览器的 uBlock、Duckduckgo 等广告 / 追踪屏蔽插件导致的？\n但我是一点都不想 debug，你配钥匙吗？爱白就白吧。\n还有底部长横幅，高度高达页面七分之一乃至六分之一的巨大 cookies 使用提醒。\n虽然可以手动全部取消，但对只是稍微有点兴趣、抱着了解一下看看的路人来说真的劝退。\n注册试用 # 但没有调查就没有发言权对吧，所以还是耐着性子走完了整个试用流程。\n哪怕只是试用也必须注册账号；甚至注册完进入主站之前还必须得填他们的调查问卷，几乎只能选择他们给定的预设选项的那种问卷（比如用途只有 工作 和 学术研究）。\n潜台词是如果预设的条件如果不符合你的情况，说明你不是他们的目标用户呗？\n实际体验 # 实际使用中经常存在卡顿；多进出了几次甚至出现了整个编辑窗口错位，完全无法继续使用的情况——这不是将不将就的问题，压根没法用明白吧。\n当然，我相信这个只是偶然，但能够出现这么严重影响体验的巨大恶性 bug……只能说对不起他家过于离谱的价格。\n定价完全没有 b 数，最低能够支持「预测（长期走势）」功能的 Essential 计划月付 299 刀（虽然是团队总价），更高一档的 Pro 更是 999 刀。\n对你没看错，每月，一千刀。\n结论 # 东西真是好东西，可惜被令人难绷的运营糟蹋了。\n大公司或许可以考虑吧，独立开发者乃至小工作室都还是别去高攀了。\n人家看不上你这点「格局」的。\n","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/posts/tech/2024/machinations-test/","section":"所有文章","summary":"乘兴而来，败兴而归。","title":"Machinations 超简略测评","type":"posts"},{"content":"","date":"2024-04-22 Mon","externalUrl":null,"permalink":"/categories/develop-tools/","section":"所有分类","summary":"","title":"开发工具","type":"categories"},{"content":"当年的 Steam「四大名著（褒贬不一）」之一。\n能够莫名其妙引发人产生哲学思辨的奇怪小品。\nWELCOME TO MOUNTAIN\nYOU ARE MOUNTAIN\nYOU ARE GOD 操作说明 # 本文所有 旋律 里的 空格 都是仅仅为了 便于阅读 或 更好的演出效果；\n无任何其他特殊作用。（你手速快连着弹也是可以的） 数字键 1 ~ 3 可以调整窗口大小：小窗口 / 大窗口 / 全屏。\n5 据说是 VR，我没有试过。 按住 鼠标左键 拖动可转动视角。 鼠标滚轮 调整镜头距离。 空格键 Space 减缓 / 恢复时间流逝速度。 按下 ZXCVBNM, 和 ASDFGHJK 演奏音符。（你就当它是钢琴。没错，这是个音游）\n弹奏旋律 ASA, MNBV CVV 可解锁第三行键盘（QWERTYUI）。 随着时间流逝，（山）可能会产生各种想法（？）。\n弹奏旋律 M,KJ 或者直接按下快捷键 . 立刻产生想法。 随着时间流逝，（山上）可能会出现各种天气。\n其他天气（包括雪）可以通过特定旋律召唤，但 雨 只能通过自然产生；\n当下雨时，按住左键摇晃山体可以把积雨云甩掉，中止下雨。 对山上的物品按住 鼠标左键 可以将物品拔出，松开可以让物品重新落回山上。\n落下的物品会砸毁树木；\n如果出现留声机，点击可以播放音乐，据说是 Albert Bowlly 的《Night and Day》《All I Do is Dream of You》《Dreaming》其中之一；\n有极小概率会出现炸弹，点击可以引爆（有成就）。 存档位置位于 C:\\Users\\[用户名]\\AppData\\LocalLow\\David OReilly\\Mountain。\n开局（创建新存档时）让你画的 3 幅画也会保存在这里。 界面介绍 # 右上角（快捷键 P）：设置 左下角（快捷键 Space）：减缓 / 恢复时间流逝速度 右下角：展开 / 收起软键盘 界面中的官方中文是狗屁不通的迷惑机翻（不过对具体心声的翻译倒是没啥问题），实际含义本文已经另行标注。\n设置界面 # 左上：\nTHOUGHTS（心思）：（山(你) 的）想法，心声，内心 OS SOUND（声音）：音效 AUTO CAM（自动相机）：自动移动镜头 右上：\n切换语言：英 / 日 / 中 左下：\nCREDITS（学分）：制作人员名单 右下：\nEVERYTHING（万事）：作者另一部作品《Everything》的 Steam 页面 MOUNTAIN ON IOS（在 IOS 山上）：IOS 版的 App Store 引流链接 隐藏菜单界面 # 弹奏旋律 FS,N,SFS,N,S,\n——德彪西《La Fille aux Cheveau（亚麻色头发的少女）》解锁。\n解锁后，右上角的设置按钮下面会出现一个新的加号按钮（快捷键 O），点击可以打开隐藏菜单界面。\n这里的上半部分是各种按钮：\n能够记忆你 曾经弹奏过的 召唤异常天气的特殊旋律 BLOOD（血液）MMM MMM ,MN AB\n——贝多芬《Moonlight Sonata（月光奏鸣曲）》 FROGS（青蛙）BB AA SS A ,, MM NN B\n——《Twinkle Twinkle Little Star（一闪一闪亮晶晶）》 FISH（鱼）CXZX CCC XXX CBB\n——《Mary Had A Little Lamb》 COINS（硬币，其实是金币）CCC CCC CBZX C\n——《Jingle Bells（铃儿响叮当）》 HEARTS（心中，爱心）SSF SSF SFJH GGF\n——约翰内斯·勃拉姆斯《Lullaby（摇篮曲）》 FLAMES（火焰，火流星雨）CVBN MBM\n——柴可夫斯基《Swan Lake（天鹅湖）》 SNOWGLOBE（雪球，其实是 雪景球，一种常见桌面摆件）BBBB BCB\n——《Winter Wonderland》 3RD ROW（第三排）右下角按钮打开的软键盘是否显示第三排按键 调整降下 ARTEFACTS（文物，人造物品）的速度 VMVM AMAM ADAD ADGN ANAD\n——《Ride of the Valkyries（女武神的骑行）》 OFF（关闭） SOME（一些） MANY（很多） 其他 FOG（雾） PRECIP（沉淀）我也没搞懂什么意思，为什么翻译成 沉淀 也毫无头绪 ECHO（回声） LOAD（重装）立刻 重开新档，慎用 SBN ,AS SSS REGEN（再生）清理山上的杂物 SSS, AAAM\n——贝多芬《Fifth Symphony（第五交响曲，即命运交响曲）》 弹奏旋律 AS,ZB《Close Encounters of The Third Kind（第三类接触，同名电影主题曲）》可以召唤能够毁灭山的随机天外陨石。\n（当陨石靠近大气层时，可以通过疯狂敲键盘让大气层维持在蓝色来抵御陨石。）\n（这个蓝色大气层同样能够阻挡 人造物品 落到山上。）\n（另外，狂按键盘同样也能加速时间流逝。）\n下半部分是游戏的统计数据：\n版本号 MOUNTAIN 2.0.1 当前（山）在宇宙中的位置图（众所周知，行星上的 季节变化 由 公转周期 决定） （山的）年龄、雨、雪、树木（数量）、植物（数量）、事物（人造物品数量） 逆天成就相关 # How to Obtain the \u0026ldquo;YOU ARE GOD\u0026rdquo; Achievement 《山》At least I know I\u0026rsquo;m alive 成就快速达成攻略 乐谱推荐 # 键盘映射关系如下表所示，♯ 是升号（Sharp），♭ 是降号（Flat）。\n具体论证见《How to Experience Mountain》。\n当然了，这游戏再怎么样也比不上专业乐器，图个一乐就行了。\n键盘与音符 映射关系 Q W E R T Y U I A♯/B♭ C C♯/D♭ D♯/E♭ F F♯/G♭ G♯/A♭ A♯/B♭ A S D F G H J K G♯/A♭ A♯/B♭ C C♯/D♭ D♯/E♭ F F♯/G♭ G♯/A♭ Z X C V B N M , F♯/G♭ G♯/A♭ A♯/B♭ C C♯/D♭ D♯/E♭ F F♯/G♭ 优秀的钢琴软件《山》的乐谱分享 《Mountain》山乐器 自制曲谱集 by Fool Fish 自动化脚本 # 见 这个仓库里的 mountain.ahk，用 AutoHotKey 写的。\n（这辈子都不可能去用 按键精灵 这种整个站在优雅二字对立面的笨比玩意的。）\n源码明文未经编译，运行前需要自行安装好 AHK 环境。\n注释一看就懂，使用方法不再赘述。\n","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/posts/game/2017/mountain-walkthrough/","section":"所有文章","summary":"\u003cp\u003e当年的 Steam「四大名著（\u003cdel\u003e褒贬不一\u003c/del\u003e）」之一。\u003cbr\u003e\n能够莫名其妙引发人产生哲学思辨的奇怪小品。\u003c/p\u003e","title":"「山」简要攻略","type":"posts"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/categories/idle-game/","section":"所有分类","summary":"","title":"放置类游戏","type":"categories"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/posts/game/","section":"所有文章","summary":"No Game No Life","title":"游戏","type":"posts"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/tags/game-achievements/","section":"所有标签","summary":"","title":"游戏成就","type":"tags"},{"content":"","date":"2017-07-02 Sun","externalUrl":null,"permalink":"/tags/game-tips/","section":"所有标签","summary":"","title":"游戏攻略","type":"tags"},{"content":" Personal Blog Content # ℹ️ Note Hugo content of Everybody Wants Some (ews.ink).\nGit submodule of unacro/blog\n","externalUrl":null,"permalink":"/readme/","section":"Blog Homepage","summary":"Personal Blog Content # ℹ️ Note Hugo content of Everybody Wants Some (ews.","title":"","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" 如果本网站的任何内容无意中侵犯了您的版权或利益，请及时与我联系，我将采取适当行动。 除非另有特殊说明，否则 本站 所有内容均在 署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 许可下授权。\n以下是该 许可证 的人类可读摘要（而不是替代）。\n您可以自由地： # 共享 — 在任何媒介以任何形式复制、发行本作品 演绎 — 修改、转换或以本作品为基础进行创作 只要你遵守许可协议条款，许可人就无法收回你的这些权利。\n惟须遵守下列条件： # 署名 — 您必须给出 适当的署名，提供指向本许可协议的链接，同时 标明是否（对原始作品）作了修改。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。 非商业性使用 — 您不得将本作品用于 商业目的。 相同方式共享 — 如果您再混合、转换或者基于本作品进行创作，您必须基于 与原先许可协议相同的许可协议 分发您贡献的作品。 没有附加限制 — 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。 声明： # 您不必因为公共领域的作品要素而遵守许可协议，或者您的使用被可适用的 例外或限制 所允许。 不提供担保。许可协议可能不会给与您意图使用的所必须的所有许可。例如，其他权利比如 形象权、隐私权 或 人格权 可能限制您如何使用作品。 署名-非商业性使用-相同方式共享 4.0 国际许可证\n","externalUrl":null,"permalink":"/copyright/","section":"Blog Homepage","summary":"","title":"版权声明","type":"page"},{"content":"","externalUrl":null,"permalink":"/categories/factory-game/","section":"所有分类","summary":"","title":"工厂类游戏","type":"categories"},{"content":" 关于本站 # 由 Hugo \u0026amp; Congo 强力驱动 全站默认字体使用 霞鹜文楷，由 CMBill 分发 Todo # 修改全站字体（使用了 霞鹜文楷屏幕阅读版，由 CMBill 分发） 站点 favicon 优化 katex 公式样式 整理博客文章的文件目录结构（按 年份 组织项目文件） 去掉单页的文章头 meta 信息 新增宽版文章排版 美化滚动条样式 关于页面最后添加本博客发展时间轴 关于我 # Smart enough to know better, stupid enough to do it anyway.\n时间线 # header badge test subheader Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. Another Awesome Header date - present Awesome Subheader With html code Coffee Tea Milk Shortcodes AWESOME With other shortcodes Another Awesome Header nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 1314 379 ","externalUrl":null,"permalink":"/about/","section":"Blog Homepage","summary":"","title":"关于","type":"page"},{"content":"","externalUrl":null,"permalink":"/categories/card-game/","section":"所有分类","summary":"","title":"卡牌游戏","type":"categories"},{"content":" 还就那个点子王 ","externalUrl":null,"permalink":"/ideas/","section":"Blog Homepage","summary":"","title":"灵感 \u0026 计划","type":"page"},{"content":"","externalUrl":null,"permalink":"/series/cult-of-the-lamb/","section":"所有系列","summary":"","title":"咩咩启示录","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/oxygen-not-included/","section":"所有系列","summary":"","title":"缺氧","type":"series"},{"content":"","externalUrl":null,"permalink":"/categories/survival-game/","section":"所有分类","summary":"","title":"生存类游戏","type":"categories"},{"content":"","externalUrl":null,"permalink":"/posts/life/","section":"所有文章","summary":"You Only Live Once","title":"生活","type":"posts"},{"content":"","externalUrl":null,"permalink":"/series/","section":"所有系列","summary":"","title":"所有系列","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/inscryption/","section":"所有系列","summary":"","title":"邪恶冥刻","type":"series"},{"content":"包括但不限于处于 正在进行中 / 无限期搁置 等状态的项目。且随时可能互相转换。\n","externalUrl":null,"permalink":"/projects/","section":"已经开始动工的企划","summary":"\u003cdel\u003e凭本事挖的坑，为什么要填？\u003c/del\u003e","title":"已经开始动工的企划","type":"projects"},{"content":"","externalUrl":null,"permalink":"/series/shapez/","section":"所有系列","summary":"","title":"异形工厂","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/game-bestiary/","section":"所有标签","summary":"","title":"游戏图鉴","type":"tags"},{"content":"","externalUrl":null,"permalink":"/categories/farm-game/","section":"所有分类","summary":"","title":"种田游戏","type":"categories"}]